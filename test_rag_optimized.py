#!/usr/bin/env python3
"""
üß™ TEST RAG OPTIMIS√â - Focus sur les performances r√©elles
Sans calculs et conversationnel (√† corriger plus tard)
Questions vari√©es pour √©viter le cache
"""
import asyncio
import httpx
import time
from typing import Dict, List

# Configuration
CHAT_ENDPOINT = "http://127.0.0.1:8001/chat"
COMPANY_ID = "MpfnlSbqwaZ6F4HvxQLRL9du0yG3"
# User ID avec format valide : testuser + 3 chiffres (vari√©s pour √©viter cache)
USER_ID = "testuser" + str(int(time.time() * 1000))[-3:]  # Ex: testuser847

class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    MAGENTA = '\033[95m'
    BOLD = '\033[1m'
    DIM = '\033[2m'
    END = '\033[0m'

# ==========================================
# üéØ TESTS OPTIMIS√âS (40 questions)
# ==========================================

OPTIMIZED_TESTS = {
    "1. QUESTIONS PRODUITS (10)": [
        {"question": "Avez-vous des couches pour b√©b√© de 7kg ?", "attendu": "taille 2 ou 3", "type": "produit_poids"},
        {"question": "Combien co√ªtent vos couches culottes ?", "attendu": "13500 ou 24000", "type": "produit_prix"},
        {"question": "Quelles tailles de couches proposez-vous ?", "attendu": "taille 1 √† 6", "type": "produit_gamme"},
        {"question": "Les couches sont vendues par combien ?", "attendu": "150 ou 300 pi√®ces", "type": "produit_lot"},
        {"question": "Quelle diff√©rence entre couches √† pression et culottes ?", "attendu": "type usage", "type": "produit_difference"},
        {"question": "Prix d'un lot de 300 couches taille 4 ?", "attendu": "22500", "type": "produit_prix_specifique"},
        {"question": "Couches pour nouveau-n√© disponibles ?", "attendu": "taille 1", "type": "produit_age"},
        {"question": "Vendez-vous des couches adultes ?", "attendu": "non disponible", "type": "produit_categorie"},
        {"question": "Quelle est votre marque de couches ?", "attendu": "nom marque", "type": "produit_marque"},
        {"question": "Les couches sont-elles de bonne qualit√© ?", "attendu": "qualit√© garantie", "type": "produit_qualite"},
    ],
    
    "2. QUESTIONS LIVRAISON (10)": [
        {"question": "Frais de livraison pour Cocody ?", "attendu": "1500", "type": "livraison_zone"},
        {"question": "Vous livrez √† Bingerville ?", "attendu": "oui 2000-2500", "type": "livraison_zone_periphe"},
        {"question": "Combien pour livrer √† Adjam√© ?", "attendu": "1500", "type": "livraison_zone_centrale"},
        {"question": "Livraison gratuite possible ?", "attendu": "non payant", "type": "livraison_gratuite"},
        {"question": "Quels sont vos d√©lais de livraison ?", "attendu": "24-48h", "type": "livraison_delai"},
        {"question": "Prix livraison Grand-Bassam ?", "attendu": "2500 ou 3500", "type": "livraison_hors_abidjan"},
        {"question": "Vous livrez dans toute la C√¥te d'Ivoire ?", "attendu": "oui", "type": "livraison_couverture"},
        {"question": "Livraison express disponible ?", "attendu": "jour m√™me si avant 11h", "type": "livraison_rapide"},
        {"question": "O√π √™tes-vous situ√©s ?", "attendu": "en ligne uniquement", "type": "livraison_localisation"},
        {"question": "Comment suivre ma livraison ?", "attendu": "contact whatsapp", "type": "livraison_suivi"},
    ],
    
    "3. QUESTIONS PAIEMENT (8)": [
        {"question": "Quels moyens de paiement acceptez-vous ?", "attendu": "wave", "type": "paiement_methode"},
        {"question": "Puis-je payer en esp√®ces ?", "attendu": "non wave uniquement", "type": "paiement_espece"},
        {"question": "Faut-il payer un acompte ?", "attendu": "2000 fcfa", "type": "paiement_acompte"},
        {"question": "Quel est votre num√©ro Wave ?", "attendu": "+225 078", "type": "paiement_numero"},
        {"question": "Je peux payer √† la livraison ?", "attendu": "solde oui acompte avant", "type": "paiement_livraison"},
        {"question": "Vous acceptez Orange Money ?", "attendu": "non wave uniquement", "type": "paiement_orange"},
        {"question": "Carte bancaire accept√©e ?", "attendu": "non wave", "type": "paiement_carte"},
        {"question": "Montant minimum pour commander ?", "attendu": "lot minimum", "type": "paiement_minimum"},
    ],
    
    "4. QUESTIONS CONTACT & SAV (7)": [
        {"question": "Comment vous contacter ?", "attendu": "whatsapp telephone", "type": "contact_general"},
        {"question": "Num√©ro WhatsApp ?", "attendu": "+225 016", "type": "contact_whatsapp"},
        {"question": "Horaires d'ouverture ?", "attendu": "toujours ouvert", "type": "contact_horaires"},
        {"question": "Puis-je √©changer un produit d√©fectueux ?", "attendu": "sav retour", "type": "sav_retour"},
        {"question": "Avez-vous un service client ?", "attendu": "oui whatsapp", "type": "sav_service"},
        {"question": "Que faire si je ne suis pas satisfait ?", "attendu": "contact sav", "type": "sav_satisfaction"},
        {"question": "Votre adresse email ?", "attendu": "contact disponible", "type": "contact_email"},
    ],
    
    "5. QUESTIONS HORS CONTEXTE (5)": [
        {"question": "Vendez-vous des jouets pour enfants ?", "attendu": "non couches uniquement", "type": "hors_produit"},
        {"question": "Vous livrez en France ?", "attendu": "non cote ivoire", "type": "hors_geo"},
        {"question": "Quelle heure est-il ?", "attendu": "hors contexte", "type": "hors_general"},
        {"question": "Proposez-vous des v√™tements b√©b√© ?", "attendu": "non couches", "type": "hors_categorie"},
        {"question": "Avez-vous des biberons ?", "attendu": "non specialises couches", "type": "hors_accessoire"},
    ],
}

# Liste prix valides pour d√©tection hallucinations
VALID_PRICES = [
    1500, 2000, 2500, 3500, 4000, 5000,  # Livraison
    13500, 17000, 18500, 20500, 22500, 24000, 24500,  # Produits
]

async def ask_question(question: str) -> Dict:
    """Pose une question au chatbot"""
    payload = {
        "company_id": COMPANY_ID,
        "user_id": USER_ID,
        "message": question,
    }
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            start_time = time.time()
            response = await client.post(CHAT_ENDPOINT, json=payload)
            elapsed = time.time() - start_time
            
            if response.status_code == 200:
                data = response.json()
                response_data = data.get("response", {})
                if isinstance(response_data, dict):
                    response_text = response_data.get("response", "")
                else:
                    response_text = str(response_data)
                
                return {
                    "success": True,
                    "response": response_text,
                    "elapsed": elapsed,
                    "raw": data
                }
            else:
                return {
                    "success": False,
                    "error": f"Status {response.status_code}",
                    "elapsed": elapsed
                }
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "elapsed": 0
        }

def analyze_response(response_text: str, attendu: str, test_type: str) -> Dict:
    """Analyse simplifi√©e de la pertinence"""
    import re
    
    response_lower = response_text.lower()
    attendu_lower = attendu.lower()
    
    # Crit√®res de base
    confidence = 0
    issues = []
    
    # 1. V√©rification pr√©sence mots-cl√©s
    keywords = attendu_lower.split()
    matches = sum(1 for kw in keywords if kw in response_lower)
    confidence = (matches / len(keywords)) * 100 if keywords else 0
    
    # 2. D√©tection hallucination prix (pattern am√©lior√©)
    prices_in_response = re.findall(r'(\d{1,3}(?:[\s.,]?\d{3})*)\s*(?:FCFA|F\s*CFA|F\s+CFA)', response_text, re.IGNORECASE)
    
    for price in prices_in_response:
        price_clean = price.replace(" ", "").replace(".", "").replace(",", "")
        try:
            price_int = int(price_clean)
            # V√©rifier si c'est un prix valide ou un multiple valide
            is_valid = price_int in VALID_PRICES
            if not is_valid:
                # V√©rifier multiples valides
                for base_price in [13500, 17000, 18500, 20500, 22500, 24000, 24500]:
                    if price_int % base_price == 0 and price_int / base_price <= 10:
                        is_valid = True
                        break
            
            if not is_valid:
                issues.append(f"‚ö†Ô∏è Prix potentiellement incorrect: {price} FCFA")
                confidence -= 15
        except ValueError:
            pass
    
    # 3. V√©rifications sp√©cifiques par type
    if "hors" in test_type:
        if any(word in response_lower for word in ["d√©sol√©", "ne peux pas", "sp√©cialis√©", "couches uniquement"]):
            confidence += 30
    
    elif "livraison" in test_type or "contact" in test_type or "paiement" in test_type:
        if matches >= len(keywords) / 2:
            confidence += 20
    
    elif "produit" in test_type:
        if any(word in response_lower for word in ["couches", "taille", "pi√®ces", "fcfa"]):
            confidence += 20
    
    is_relevant = confidence >= 40
    
    return {
        "is_relevant": is_relevant,
        "confidence": max(0, min(100, confidence)),
        "issues": issues,
        "keyword_matches": matches,
        "total_keywords": len(keywords)
    }

def print_result(test: Dict, result: Dict, analysis: Dict):
    """Affiche TOUT : question, r√©ponse compl√®te, sources documentaires"""
    success_icon = f"{Colors.GREEN}‚úÖ{Colors.END}" if analysis["is_relevant"] else f"{Colors.RED}‚ùå{Colors.END}"
    
    print(f"\n{'='*100}")
    print(f"{success_icon} {Colors.BOLD}QUESTION: {test['question']}{Colors.END}")
    print(f"   Type: {Colors.CYAN}{test['type']}{Colors.END} | Attendu: {Colors.YELLOW}{test['attendu']}{Colors.END}")
    print(f"   Temps: {Colors.MAGENTA}{result['elapsed']:.2f}s{Colors.END} | Confiance analyse: {Colors.BLUE}{analysis['confidence']:.0f}%{Colors.END}")
    
    if not result["success"]:
        print(f"\n   {Colors.RED}‚ùå ERREUR:{Colors.END} {result.get('error', 'Unknown')}")
        return
    
    # ========================================
    # 1. R√âPONSE LLM COMPL√àTE (PAS DE TRONCATURE)
    # ========================================
    response_text = result['response']
    print(f"\n{Colors.GREEN}{Colors.BOLD}üìù R√âPONSE LLM COMPL√àTE:{Colors.END}")
    print(f"{Colors.GREEN}{'‚îÄ'*100}{Colors.END}")
    for line in response_text.split('\n'):
        print(f"   {line}")
    print(f"{Colors.GREEN}{'‚îÄ'*100}{Colors.END}")
    
    # ========================================
    # 2. DOCUMENTS SOURCES ENVOY√âS AU LLM
    # ========================================
    if 'raw' in result and 'response' in result['raw']:
        raw_response = result['raw']['response']
        
        if isinstance(raw_response, dict):
            # M√©thode de recherche utilis√©e
            search_method = raw_response.get('search_method', 'N/A')
            docs_found = raw_response.get('documents_found', False)
            
            print(f"\n{Colors.CYAN}{Colors.BOLD}üìö SOURCES DOCUMENTAIRES:{Colors.END}")
            print(f"   M√©thode: {Colors.CYAN}{search_method}{Colors.END}")
            print(f"   Documents trouv√©s: {Colors.CYAN}{'Oui' if docs_found else 'Non'}{Colors.END}")
            
            # Contexte utilis√© (documents sources)
            context = raw_response.get('context_used', '')
            
            if context and context != 'Aucun':
                print(f"\n{Colors.YELLOW}{Colors.BOLD}üìÑ CONTEXTE ENVOY√â AU LLM:{Colors.END}")
                print(f"{Colors.YELLOW}{'‚îÄ'*100}{Colors.END}")
                
                # Afficher TOUT le contexte (pas de limite)
                for line in context.split('\n'):
                    print(f"   {line}")
                
                print(f"{Colors.YELLOW}{'‚îÄ'*100}{Colors.END}")
                print(f"   {Colors.DIM}Taille contexte: {len(context)} caract√®res{Colors.END}")
            else:
                print(f"\n   {Colors.YELLOW}‚ö†Ô∏è  Aucun document source trouv√©{Colors.END}")
        else:
            print(f"\n   {Colors.YELLOW}‚ö†Ô∏è  Format r√©ponse inattendu{Colors.END}")
    else:
        print(f"\n   {Colors.YELLOW}‚ö†Ô∏è  M√©tadonn√©es sources non disponibles{Colors.END}")
    
    # ========================================
    # 3. PROBL√àMES D√âTECT√âS (SI PR√âSENTS)
    # ========================================
    if analysis["issues"]:
        print(f"\n{Colors.RED}{Colors.BOLD}‚ö†Ô∏è  PROBL√àMES D√âTECT√âS:{Colors.END}")
        for issue in analysis["issues"]:
            print(f"   {issue}")
    
    print(f"\n{'='*100}\n")

async def run_test_battery(category: str, tests: List[Dict]) -> Dict:
    """Ex√©cute une batterie de tests"""
    print(f"\n{Colors.BOLD}{'='*80}{Colors.END}")
    print(f"{Colors.BOLD}{category}{Colors.END}")
    print(f"{Colors.BOLD}{'='*80}{Colors.END}")
    
    results = {
        "total": len(tests),
        "passed": 0,
        "failed": 0,
        "total_time": 0,
        "details": []
    }
    
    for i, test in enumerate(tests, 1):
        print(f"\n{Colors.CYAN}[{i}/{len(tests)}]{Colors.END}", end=" ")
        
        result = await ask_question(test["question"])
        results["total_time"] += result.get("elapsed", 0)
        
        if result["success"]:
            analysis = analyze_response(result["response"], test["attendu"], test["type"])
            
            if analysis["is_relevant"]:
                results["passed"] += 1
            else:
                results["failed"] += 1
            
            results["details"].append({
                "test": test,
                "result": result,
                "analysis": analysis
            })
            
            print_result(test, result, analysis)
        else:
            results["failed"] += 1
            print(f"{Colors.RED}‚ùå ERREUR:{Colors.END} {result.get('error')}")
        
        # Pause entre requ√™tes pour √©viter rate limiting Groq (6000 TPM)
        # 40 questions √ó 1800 tokens = 72,000 tokens
        # Pour rester sous 6000 TPM: 72,000 √∑ 6000 = 12 min minimum
        # 12 min √∑ 40 questions = 18s par question minimum
        await asyncio.sleep(2.0)  # 2s entre chaque + temps traitement = safe
    
    # R√©sum√© cat√©gorie
    success_rate = (results["passed"] / results["total"]) * 100
    print(f"\n{Colors.BOLD}üìä R√©sum√© {category}:{Colors.END}")
    print(f"   R√©ussis: {Colors.GREEN}{results['passed']}/{results['total']}{Colors.END}")
    print(f"   √âchou√©s: {Colors.RED}{results['failed']}/{results['total']}{Colors.END}")
    print(f"   Taux: {Colors.BLUE}{success_rate:.1f}%{Colors.END}")
    print(f"   Temps total: {results['total_time']:.2f}s")
    print(f"   Temps moyen: {results['total_time']/results['total']:.2f}s")
    
    return results

async def main():
    """Fonction principale"""
    print(f"\n{Colors.BOLD}{'='*80}{Colors.END}")
    print(f"{Colors.BOLD}üß™ TEST RAG OPTIMIS√â - RUE_DU_GROSSISTE{Colors.END}")
    print(f"{Colors.BOLD}{'='*80}{Colors.END}")
    print(f"\nüìä Configuration:")
    print(f"   Endpoint: {CHAT_ENDPOINT}")
    print(f"   Company: {COMPANY_ID}")
    print(f"   User: {USER_ID} (unique)")
    print(f"   Total: {sum(len(tests) for tests in OPTIMIZED_TESTS.values())} questions")
    
    input("\nAppuyez sur ENTR√âE pour commencer...")
    
    all_results = {}
    total_tests = 0
    total_passed = 0
    total_time = 0
    
    for category, tests in OPTIMIZED_TESTS.items():
        results = await run_test_battery(category, tests)
        all_results[category] = results
        total_tests += results["total"]
        total_passed += results["passed"]
        total_time += results["total_time"]
    
    # RAPPORT FINAL
    print(f"\n\n{Colors.BOLD}{'='*80}{Colors.END}")
    print(f"{Colors.BOLD}üìä RAPPORT FINAL{Colors.END}")
    print(f"{Colors.BOLD}{'='*80}{Colors.END}")
    
    print(f"\nüéØ R√©sultats globaux:")
    success_rate = (total_passed / total_tests) * 100
    print(f"   Total tests: {total_tests}")
    print(f"   ‚úÖ R√©ussis: {total_passed} ({success_rate:.1f}%)")
    print(f"   ‚ùå √âchou√©s: {total_tests - total_passed} ({100-success_rate:.1f}%)")
    print(f"   ‚è±Ô∏è  Temps total: {total_time:.2f}s")
    print(f"   ‚ö° Temps moyen/test: {total_time/total_tests:.2f}s")
    
    print(f"\nüìà Performance par cat√©gorie:")
    for category, results in all_results.items():
        rate = (results["passed"] / results["total"]) * 100
        icon = "üü¢" if rate >= 70 else "üü°" if rate >= 50 else "üî¥"
        print(f"   {icon} {category:55} {rate:5.1f}%")
    
    # Note finale
    if success_rate >= 80:
        grade = "A - EXCELLENT"
    elif success_rate >= 70:
        grade = "B - BON"
    elif success_rate >= 60:
        grade = "C - MOYEN"
    else:
        grade = "D - √Ä AM√âLIORER"
    
    print(f"\nüéì NOTE FINALE: {Colors.BOLD}{grade}{Colors.END}")
    print(f"\n{'='*80}\n")

if __name__ == "__main__":
    asyncio.run(main())
