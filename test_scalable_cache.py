#!/usr/bin/env python3
"""
üß™ TEST DU CACHE S√âMANTIQUE SCALABLE
Valide l'isolation par company_id
"""

import asyncio
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

async def test_cache_isolation():
    """Test principal : isolation entre companies"""
    
    print("üß™ TEST CACHE S√âMANTIQUE SCALABLE")
    print("="*60)
    
    from core.scalable_semantic_cache import get_scalable_cache
    
    cache = get_scalable_cache()
    
    # SC√âNARIO: 2 companies diff√©rentes, m√™me question, r√©ponses diff√©rentes
    
    print("\n1Ô∏è‚É£ Company A (C√¥te d'Ivoire) stocke une r√©ponse...")
    await cache.store_response(
        query="Quel est le prix de livraison ?",
        response="La livraison co√ªte 1.500 FCFA √† Abidjan",
        company_id="company_cote_ivoire_A"
    )
    print("   ‚úÖ R√©ponse stock√©e: 1.500 FCFA")
    
    print("\n2Ô∏è‚É£ Company B (France) stocke M√äME question, r√©ponse diff√©rente...")
    await cache.store_response(
        query="Quel est le prix de livraison ?",
        response="La livraison co√ªte 15 EUR en France",
        company_id="company_france_B"
    )
    print("   ‚úÖ R√©ponse stock√©e: 15 EUR")
    
    print("\n3Ô∏è‚É£ Company A r√©cup√®re sa r√©ponse...")
    result_A = await cache.get_cached_response(
        query="Prix de livraison ?",
        company_id="company_cote_ivoire_A"
    )
    
    if result_A:
        response, confidence = result_A
        print(f"   ‚úÖ Trouv√©: {response}")
        print(f"   üéØ Confiance: {confidence:.3f}")
        
        if "1.500 FCFA" in response:
            print("   ‚úÖ CORRECT: R√©ponse de Company A (C√¥te d'Ivoire)")
        else:
            print("   ‚ùå ERREUR: Mauvaise r√©ponse !")
    else:
        print("   ‚ùå Pas trouv√©")
    
    print("\n4Ô∏è‚É£ Company B r√©cup√®re sa r√©ponse...")
    result_B = await cache.get_cached_response(
        query="Prix de livraison ?",
        company_id="company_france_B"
    )
    
    if result_B:
        response, confidence = result_B
        print(f"   ‚úÖ Trouv√©: {response}")
        print(f"   üéØ Confiance: {confidence:.3f}")
        
        if "15 EUR" in response:
            print("   ‚úÖ CORRECT: R√©ponse de Company B (France)")
        else:
            print("   ‚ùå ERREUR: Mauvaise r√©ponse !")
    else:
        print("   ‚ùå Pas trouv√©")
    
    # Test pollution crois√©e
    print("\n5Ô∏è‚É£ Test pollution : Company A re√ßoit-elle r√©ponse de Company B ?...")
    result_pollution = await cache.get_cached_response(
        query="Quel est le prix de livraison ?",
        company_id="company_cote_ivoire_A"
    )
    
    if result_pollution:
        response, _ = result_pollution
        if "15 EUR" in response:
            print("   ‚ùå POLLUTION D√âTECT√âE ! Company A a re√ßu r√©ponse de Company B")
            print("   ‚ùå CACHE NON ISOL√â !")
        elif "1.500 FCFA" in response:
            print("   ‚úÖ PAS DE POLLUTION : Company A re√ßoit sa propre r√©ponse")
            print("   ‚úÖ CACHE BIEN ISOL√â !")
    
    # Stats par company
    print("\n6Ô∏è‚É£ Stats par company...")
    stats_A = cache.get_company_stats("company_cote_ivoire_A")
    stats_B = cache.get_company_stats("company_france_B")
    
    print(f"\n   Company A (C√¥te d'Ivoire):")
    print(f"      ‚Ä¢ Requ√™tes: {stats_A['total_queries']}")
    print(f"      ‚Ä¢ Hits: {stats_A['cache_hits']}")
    print(f"      ‚Ä¢ Hit rate: {stats_A['hit_rate_percent']:.1f}%")
    print(f"      ‚Ä¢ Cache size: {stats_A['cache_size']}")
    
    print(f"\n   Company B (France):")
    print(f"      ‚Ä¢ Requ√™tes: {stats_B['total_queries']}")
    print(f"      ‚Ä¢ Hits: {stats_B['cache_hits']}")
    print(f"      ‚Ä¢ Hit rate: {stats_B['hit_rate_percent']:.1f}%")
    print(f"      ‚Ä¢ Cache size: {stats_B['cache_size']}")
    
    # Stats globales
    print("\n7Ô∏è‚É£ Stats globales...")
    global_stats = cache.get_global_stats()
    print(f"   ‚Ä¢ Total companies: {global_stats['total_companies']}")
    print(f"   ‚Ä¢ Total entries: {global_stats['total_entries']}")
    print(f"   ‚Ä¢ Hit rate global: {global_stats['global_hit_rate_percent']:.1f}%")
    
    print("\n" + "="*60)
    
    # Validation
    if result_A and result_B:
        if "1.500 FCFA" in result_A[0] and "15 EUR" in result_B[0]:
            print("‚úÖ TEST R√âUSSI : CACHE PARFAITEMENT ISOL√â PAR COMPANY")
            return True
        else:
            print("‚ùå TEST √âCHOU√â : POLLUTION ENTRE COMPANIES")
            return False
    else:
        print("‚ö†Ô∏è TEST INCOMPLET : Certaines r√©ponses non trouv√©es")
        return False

async def test_scalability():
    """Test scalabilit√© avec plusieurs companies"""
    
    print("\n\nüî• TEST SCALABILIT√â (10 COMPANIES)")
    print("="*60)
    
    from core.scalable_semantic_cache import get_scalable_cache
    
    cache = get_scalable_cache()
    
    # Cr√©er 10 companies avec donn√©es diff√©rentes
    companies = [
        ("company_france", "15 EUR", "France"),
        ("company_usa", "20 USD", "USA"),
        ("company_uk", "12 GBP", "UK"),
        ("company_ci", "1500 FCFA", "C√¥te d'Ivoire"),
        ("company_senegal", "2000 FCFA", "S√©n√©gal"),
        ("company_maroc", "50 MAD", "Maroc"),
        ("company_tunisie", "30 TND", "Tunisie"),
        ("company_canada", "25 CAD", "Canada"),
        ("company_suisse", "18 CHF", "Suisse"),
        ("company_belgique", "14 EUR", "Belgique"),
    ]
    
    # Stocker pour chaque company
    print("\n1Ô∏è‚É£ Stockage pour 10 companies...")
    for company_id, price, country in companies:
        await cache.store_response(
            query="Prix de livraison ?",
            response=f"La livraison co√ªte {price} en {country}",
            company_id=company_id
        )
    print(f"   ‚úÖ {len(companies)} companies configur√©es")
    
    # R√©cup√©rer pour chaque company
    print("\n2Ô∏è‚É£ V√©rification isolation...")
    errors = 0
    for company_id, expected_price, country in companies:
        result = await cache.get_cached_response(
            query="Quel est le prix de livraison ?",
            company_id=company_id
        )
        
        if result:
            response, confidence = result
            if expected_price in response:
                print(f"   ‚úÖ {country}: {expected_price} (OK)")
            else:
                print(f"   ‚ùå {country}: Attendu {expected_price}, re√ßu: {response}")
                errors += 1
        else:
            print(f"   ‚ùå {country}: Pas de r√©ponse")
            errors += 1
    
    # Stats finales
    print("\n3Ô∏è‚É£ Stats finales...")
    global_stats = cache.get_global_stats()
    print(f"   ‚Ä¢ Companies actives: {global_stats['total_companies']}")
    print(f"   ‚Ä¢ Total entr√©es: {global_stats['total_entries']}")
    print(f"   ‚Ä¢ Hit rate: {global_stats['global_hit_rate_percent']:.1f}%")
    
    print("\n" + "="*60)
    if errors == 0:
        print("‚úÖ SCALABILIT√â VALID√âE : 10 companies isol√©es parfaitement")
        return True
    else:
        print(f"‚ùå SCALABILIT√â √âCHOU√âE : {errors} erreurs")
        return False

async def main():
    """Point d'entr√©e"""
    
    # Test 1: Isolation
    success1 = await test_cache_isolation()
    
    # Test 2: Scalabilit√©
    success2 = await test_scalability()
    
    print("\n\n" + "="*60)
    print("üìä R√âSULTATS FINAUX")
    print("="*60)
    print(f"Test isolation: {'‚úÖ R√âUSSI' if success1 else '‚ùå √âCHOU√â'}")
    print(f"Test scalabilit√©: {'‚úÖ R√âUSSI' if success2 else '‚ùå √âCHOU√â'}")
    
    if success1 and success2:
        print("\nüéâ CACHE S√âMANTIQUE SCALABLE 100% FONCTIONNEL")
        print("‚úÖ Pr√™t pour production avec ‚àû entreprises")
    else:
        print("\n‚ö†Ô∏è Probl√®mes d√©tect√©s, √† corriger")

if __name__ == "__main__":
    asyncio.run(main())
