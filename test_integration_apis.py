#!/usr/bin/env python3
"""
üîå TESTS D'INT√âGRATION & PANNES APIs - CHATBOT RUE_DU_GROS
=========================================================
Tests de robustesse face aux pannes d'APIs externes
Validation des m√©canismes de fallback et r√©cup√©ration
"""

import asyncio
import aiohttp
import time
import json
from datetime import datetime
import subprocess
import psutil
import requests

# Configuration
ENDPOINT_URL = "http://127.0.0.1:8001/chat"
COMPANY_ID = "MpfnlSbqwaZ6F4HvxQLRL9du0yG3"

# URLs des services √† tester
MEILISEARCH_URL = "http://127.0.0.1:7700"
SUPABASE_URL = "https://your-project.supabase.co"  # √Ä ajuster selon config

class IntegrationTester:
    def __init__(self):
        self.results = []
        self.service_failures = []
        
    # Tests de disponibilit√© des services
    SERVICE_AVAILABILITY_TESTS = [
        {
            "name": "MeiliSearch Health Check",
            "url": f"{MEILISEARCH_URL}/health",
            "service": "meilisearch",
            "critical": True
        },
        {
            "name": "MeiliSearch Version",
            "url": f"{MEILISEARCH_URL}/version",
            "service": "meilisearch",
            "critical": False
        }
    ]
    
    # Tests de r√©silience aux pannes
    RESILIENCE_TESTS = [
        {
            "name": "Requ√™te Pendant Surcharge MeiliSearch",
            "query": "combien co√ªtent les couches taille 1",
            "simulation": "meilisearch_overload",
            "expected_behavior": "graceful_degradation"
        },
        {
            "name": "Requ√™te avec Timeout R√©seau",
            "query": "livraison √† Cocody combien √ßa co√ªte",
            "simulation": "network_timeout",
            "expected_behavior": "timeout_handling"
        },
        {
            "name": "Requ√™te avec Service Indisponible",
            "query": "je peux payer avec wave money",
            "simulation": "service_unavailable",
            "expected_behavior": "fallback_response"
        }
    ]
    
    # Tests de r√©cup√©ration apr√®s panne
    RECOVERY_TESTS = [
        {
            "name": "R√©cup√©ration Apr√®s Red√©marrage MeiliSearch",
            "steps": [
                "test_before_restart",
                "simulate_restart", 
                "test_after_restart"
            ],
            "query": "prix couches taille 4",
            "expected_recovery_time": 30  # secondes
        }
    ]

    async def check_service_availability(self):
        """V√©rifie la disponibilit√© des services externes"""
        print(f"\nüîç V√âRIFICATION DISPONIBILIT√â SERVICES")
        print("="*50)
        
        availability_results = []
        
        for test in self.SERVICE_AVAILABILITY_TESTS:
            print(f"\nüì° {test['name']}")
            
            try:
                start_time = time.time()
                response = requests.get(test['url'], timeout=10)
                end_time = time.time()
                duration = (end_time - start_time) * 1000
                
                if response.status_code == 200:
                    print(f"    ‚úÖ Service disponible ({duration:.1f}ms)")
                    status = "available"
                else:
                    print(f"    ‚ö†Ô∏è Service r√©pond mais erreur {response.status_code}")
                    status = "error"
                
            except requests.exceptions.Timeout:
                print(f"    ‚è∞ Timeout - Service lent ou indisponible")
                status = "timeout"
                duration = 10000
                
            except requests.exceptions.ConnectionError:
                print(f"    ‚ùå Service indisponible - Connexion refus√©e")
                status = "unavailable"
                duration = 0
                
            except Exception as e:
                print(f"    üí• Erreur inattendue: {str(e)}")
                status = "error"
                duration = 0
            
            availability_results.append({
                'service': test['service'],
                'test_name': test['name'],
                'status': status,
                'duration': duration,
                'critical': test['critical'],
                'timestamp': time.time()
            })
            
            if test['critical'] and status != "available":
                self.service_failures.append({
                    'service': test['service'],
                    'issue': f"Service critique indisponible: {test['name']}",
                    'impact': "high"
                })
        
        return availability_results

    async def run_resilience_tests(self, session):
        """Tests de r√©silience face aux pannes"""
        print(f"\nüõ°Ô∏è TESTS DE R√âSILIENCE")
        print("="*50)
        
        resilience_results = []
        
        for test in self.RESILIENCE_TESTS:
            print(f"\n‚ö° {test['name']}")
            print(f"    Simulation: {test['simulation']}")
            
            # Simulation de la panne selon le type
            if test['simulation'] == "meilisearch_overload":
                await self.simulate_meilisearch_overload()
            elif test['simulation'] == "network_timeout":
                await self.simulate_network_timeout()
            elif test['simulation'] == "service_unavailable":
                await self.simulate_service_unavailable()
            
            # Test de la requ√™te pendant la simulation
            success, response, duration = await self.send_request_with_timeout(
                session, test['query'], timeout=15
            )
            
            # Analyse du comportement
            behavior_analysis = self.analyze_resilience_behavior(
                test, success, response, duration
            )
            
            result = {
                'test_name': test['name'],
                'query': test['query'],
                'simulation': test['simulation'],
                'expected_behavior': test['expected_behavior'],
                'success': success,
                'response': response if success else str(response),
                'duration': duration,
                'behavior_analysis': behavior_analysis,
                'timestamp': time.time()
            }
            
            resilience_results.append(result)
            
            if behavior_analysis['appropriate']:
                print(f"    ‚úÖ Comportement appropri√©: {behavior_analysis['description']}")
            else:
                print(f"    ‚ùå Comportement inappropri√©: {behavior_analysis['description']}")
                self.service_failures.append({
                    'test': test['name'],
                    'issue': behavior_analysis['description'],
                    'impact': 'medium'
                })
            
            print(f"    ‚è±Ô∏è Temps de r√©ponse: {duration:.1f}ms")
            
            # Nettoyage apr√®s simulation
            await self.cleanup_simulation(test['simulation'])
            await asyncio.sleep(2)
        
        return resilience_results

    async def run_recovery_tests(self, session):
        """Tests de r√©cup√©ration apr√®s panne"""
        print(f"\nüîÑ TESTS DE R√âCUP√âRATION")
        print("="*50)
        
        recovery_results = []
        
        for test in self.RECOVERY_TESTS:
            print(f"\nüîÅ {test['name']}")
            
            recovery_data = {
                'test_name': test['name'],
                'query': test['query'],
                'expected_recovery_time': test['expected_recovery_time'],
                'steps': []
            }
            
            # √âtape 1: Test avant simulation
            print("    1. Test avant simulation...")
            success_before, response_before, duration_before = await self.send_request(
                session, test['query']
            )
            
            recovery_data['steps'].append({
                'step': 'before_simulation',
                'success': success_before,
                'duration': duration_before,
                'response_length': len(response_before) if success_before else 0
            })
            
            if success_before:
                print(f"       ‚úÖ Fonctionnel ({duration_before:.1f}ms)")
            else:
                print(f"       ‚ùå D√©j√† dysfonctionnel")
            
            # √âtape 2: Simulation de panne/red√©marrage
            print("    2. Simulation de red√©marrage...")
            restart_success = await self.simulate_service_restart("meilisearch")
            
            if restart_success:
                print("       üîÑ Red√©marrage simul√©")
            else:
                print("       ‚ö†Ô∏è Simulation de red√©marrage √©chou√©e")
            
            # √âtape 3: Tests de r√©cup√©ration
            print("    3. Tests de r√©cup√©ration...")
            recovery_start = time.time()
            max_attempts = test['expected_recovery_time']
            
            for attempt in range(1, max_attempts + 1):
                await asyncio.sleep(1)
                
                success_after, response_after, duration_after = await self.send_request(
                    session, test['query']
                )
                
                recovery_time = time.time() - recovery_start
                
                if success_after:
                    print(f"       ‚úÖ R√©cup√©ration r√©ussie en {recovery_time:.1f}s (tentative {attempt})")
                    
                    recovery_data['steps'].append({
                        'step': 'recovery_successful',
                        'recovery_time': recovery_time,
                        'attempts': attempt,
                        'success': True,
                        'duration': duration_after
                    })
                    break
                else:
                    if attempt % 5 == 0:  # Log tous les 5 essais
                        print(f"       ‚è≥ Tentative {attempt}/{max_attempts}...")
            
            else:
                # R√©cup√©ration √©chou√©e
                print(f"       ‚ùå R√©cup√©ration √©chou√©e apr√®s {max_attempts}s")
                recovery_data['steps'].append({
                    'step': 'recovery_failed',
                    'recovery_time': max_attempts,
                    'attempts': max_attempts,
                    'success': False
                })
                
                self.service_failures.append({
                    'test': test['name'],
                    'issue': f"R√©cup√©ration √©chou√©e apr√®s {max_attempts}s",
                    'impact': 'high'
                })
            
            recovery_results.append(recovery_data)
        
        return recovery_results

    async def simulate_meilisearch_overload(self):
        """Simule une surcharge de MeiliSearch"""
        print("       üî• Simulation surcharge MeiliSearch...")
        # Simulation basique - dans un vrai test, on pourrait envoyer de nombreuses requ√™tes
        await asyncio.sleep(0.1)

    async def simulate_network_timeout(self):
        """Simule un timeout r√©seau"""
        print("       ‚è∞ Simulation timeout r√©seau...")
        await asyncio.sleep(0.1)

    async def simulate_service_unavailable(self):
        """Simule un service indisponible"""
        print("       ‚ùå Simulation service indisponible...")
        await asyncio.sleep(0.1)

    async def simulate_service_restart(self, service):
        """Simule le red√©marrage d'un service"""
        print(f"       üîÑ Simulation red√©marrage {service}...")
        # Dans un environnement de test r√©el, on pourrait red√©marrer le service
        # Pour cette simulation, on attend juste
        await asyncio.sleep(2)
        return True

    async def cleanup_simulation(self, simulation_type):
        """Nettoie apr√®s une simulation"""
        await asyncio.sleep(0.1)

    def analyze_resilience_behavior(self, test, success, response, duration):
        """Analyse le comportement de r√©silience"""
        expected = test['expected_behavior']
        
        if expected == "graceful_degradation":
            if success and duration < 30000:  # 30s max
                return {
                    'appropriate': True,
                    'description': 'D√©gradation gracieuse - service maintenu'
                }
            elif success and duration >= 30000:
                return {
                    'appropriate': False,
                    'description': 'R√©ponse trop lente sous charge'
                }
            else:
                return {
                    'appropriate': False,
                    'description': 'Service compl√®tement indisponible'
                }
        
        elif expected == "timeout_handling":
            if success and duration < 20000:  # 20s max
                return {
                    'appropriate': True,
                    'description': 'Timeout g√©r√© correctement'
                }
            else:
                return {
                    'appropriate': False,
                    'description': 'Gestion de timeout insuffisante'
                }
        
        elif expected == "fallback_response":
            if success:
                # V√©rifier si c'est une r√©ponse de fallback
                fallback_indicators = [
                    'temporairement indisponible',
                    'service en maintenance',
                    'r√©essayez plus tard',
                    'probl√®me technique'
                ]
                
                if any(indicator in response.lower() for indicator in fallback_indicators):
                    return {
                        'appropriate': True,
                        'description': 'R√©ponse de fallback appropri√©e'
                    }
                else:
                    return {
                        'appropriate': True,
                        'description': 'Service maintenu malgr√© la panne'
                    }
            else:
                return {
                    'appropriate': False,
                    'description': 'Aucune r√©ponse de fallback'
                }
        
        return {
            'appropriate': False,
            'description': 'Comportement non analys√©'
        }

    async def send_request_with_timeout(self, session, query, timeout=10):
        """Envoie une requ√™te avec timeout personnalis√©"""
        payload = {
            "message": query,
            "company_id": COMPANY_ID,
            "user_id": "integrationtest123"
        }
        
        start_time = time.time()
        try:
            async with session.post(ENDPOINT_URL, json=payload, timeout=timeout) as response:
                end_time = time.time()
                duration = (end_time - start_time) * 1000
                
                if response.status == 200:
                    response_text = await response.text()
                    try:
                        response_json = json.loads(response_text)
                        actual_response = response_json.get('response', response_text)
                    except:
                        actual_response = response_text
                    return True, actual_response, duration
                else:
                    error_text = await response.text()
                    return False, f"HTTP {response.status}: {error_text}", duration
                    
        except asyncio.TimeoutError:
            end_time = time.time()
            duration = (end_time - start_time) * 1000
            return False, f"Timeout apr√®s {timeout}s", duration
            
        except Exception as e:
            end_time = time.time()
            duration = (end_time - start_time) * 1000
            return False, str(e), duration

    async def send_request(self, session, query):
        """Envoie une requ√™te standard"""
        return await self.send_request_with_timeout(session, query, 30)

    async def run_all_tests(self):
        """Lance tous les tests d'int√©gration"""
        print("üîå TESTS D'INT√âGRATION & PANNES APIs - RUE_DU_GROS")
        print("="*60)
        print(f"üéØ URL: {ENDPOINT_URL}")
        print(f"üè¢ Company ID: {COMPANY_ID}")
        print(f"üîß Tests de robustesse et int√©gration...")
        
        # V√©rification initiale des services
        availability_results = await self.check_service_availability()
        
        async with aiohttp.ClientSession() as session:
            # Tests de r√©silience
            resilience_results = await self.run_resilience_tests(session)
            
            # Tests de r√©cup√©ration
            recovery_results = await self.run_recovery_tests(session)
            
            self.results = {
                'availability': availability_results,
                'resilience': resilience_results,
                'recovery': recovery_results
            }
            
        await self.generate_integration_report()

    async def generate_integration_report(self):
        """G√©n√®re le rapport d'int√©gration final"""
        print("\n" + "="*60)
        print("üîå RAPPORT D'INT√âGRATION FINAL")
        print("="*60)
        
        availability_results = self.results['availability']
        resilience_results = self.results['resilience']
        recovery_results = self.results['recovery']
        
        # Analyse de disponibilit√©
        critical_services = [r for r in availability_results if r['critical']]
        available_critical = [r for r in critical_services if r['status'] == 'available']
        
        print(f"üì° DISPONIBILIT√â DES SERVICES:")
        print(f"  ‚Ä¢ Services critiques: {len(available_critical)}/{len(critical_services)} disponibles")
        
        for service in availability_results:
            status_icon = "‚úÖ" if service['status'] == 'available' else "‚ùå"
            critical_mark = " (CRITIQUE)" if service['critical'] else ""
            print(f"    {status_icon} {service['test_name']}: {service['status']}{critical_mark}")
        
        # Analyse de r√©silience
        resilient_tests = [r for r in resilience_results if r['behavior_analysis']['appropriate']]
        resilience_rate = (len(resilient_tests) / len(resilience_results)) * 100 if resilience_results else 0
        
        print(f"\nüõ°Ô∏è R√âSILIENCE:")
        print(f"  ‚Ä¢ Tests r√©ussis: {len(resilient_tests)}/{len(resilience_results)} ({resilience_rate:.1f}%)")
        
        for test in resilience_results:
            status_icon = "‚úÖ" if test['behavior_analysis']['appropriate'] else "‚ùå"
            print(f"    {status_icon} {test['test_name']}: {test['behavior_analysis']['description']}")
        
        # Analyse de r√©cup√©ration
        successful_recoveries = []
        for recovery in recovery_results:
            recovery_successful = any(step.get('success', False) for step in recovery['steps'] if step['step'] == 'recovery_successful')
            if recovery_successful:
                successful_recoveries.append(recovery)
        
        recovery_rate = (len(successful_recoveries) / len(recovery_results)) * 100 if recovery_results else 0
        
        print(f"\nüîÑ R√âCUP√âRATION:")
        print(f"  ‚Ä¢ R√©cup√©rations r√©ussies: {len(successful_recoveries)}/{len(recovery_results)} ({recovery_rate:.1f}%)")
        
        for recovery in recovery_results:
            recovery_step = next((s for s in recovery['steps'] if s['step'] in ['recovery_successful', 'recovery_failed']), None)
            if recovery_step:
                if recovery_step['success']:
                    print(f"    ‚úÖ {recovery['test_name']}: R√©cup√©ration en {recovery_step['recovery_time']:.1f}s")
                else:
                    print(f"    ‚ùå {recovery['test_name']}: R√©cup√©ration √©chou√©e")
        
        # Score global d'int√©gration
        availability_score = (len(available_critical) / len(critical_services)) * 100 if critical_services else 100
        integration_score = (availability_score + resilience_rate + recovery_rate) / 3
        
        print(f"\nüéØ SCORE GLOBAL D'INT√âGRATION: {integration_score:.1f}%")
        
        # Probl√®mes critiques
        if self.service_failures:
            high_impact = [f for f in self.service_failures if f['impact'] == 'high']
            medium_impact = [f for f in self.service_failures if f['impact'] == 'medium']
            
            if high_impact:
                print(f"\nüö® PROBL√àMES CRITIQUES ({len(high_impact)}):")
                for failure in high_impact:
                    print(f"  ‚Ä¢ {failure['issue']}")
            
            if medium_impact:
                print(f"\n‚ö†Ô∏è PROBL√àMES MOYENS ({len(medium_impact)}):")
                for failure in medium_impact:
                    print(f"  ‚Ä¢ {failure['issue']}")
        
        # Verdict final
        print(f"\nüèÜ VERDICT INT√âGRATION:")
        if integration_score >= 90:
            print("‚úÖ EXCELLENT - Syst√®me tr√®s robuste")
        elif integration_score >= 75:
            print("üü° BON - Bonne r√©silience g√©n√©rale")
        elif integration_score >= 60:
            print("üü† MOYEN - Am√©liorations n√©cessaires")
        else:
            print("üî¥ CRITIQUE - Probl√®mes d'int√©gration majeurs")
        
        # Recommandations
        print(f"\nüí° RECOMMANDATIONS:")
        if integration_score >= 90:
            print("  ‚Ä¢ Excellente robustesse du syst√®me")
            print("  ‚Ä¢ Maintenir les bonnes pratiques de monitoring")
        else:
            print("  ‚Ä¢ Am√©liorer les m√©canismes de fallback")
            print("  ‚Ä¢ Optimiser les temps de r√©cup√©ration")
            print("  ‚Ä¢ Renforcer le monitoring des services")
            print("  ‚Ä¢ Impl√©menter des circuit breakers")
            print("  ‚Ä¢ Tester r√©guli√®rement la r√©silience")
        
        # Sauvegarde du rapport
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = f"integration_report_{timestamp}.json"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump({
                'summary': {
                    'integration_score': integration_score,
                    'availability_score': availability_score,
                    'resilience_rate': resilience_rate,
                    'recovery_rate': recovery_rate,
                    'critical_failures': len([f for f in self.service_failures if f['impact'] == 'high']),
                    'timestamp': timestamp
                },
                'detailed_results': self.results,
                'service_failures': self.service_failures
            }, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ Rapport sauvegard√©: {report_file}")

async def main():
    tester = IntegrationTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())
