#!/usr/bin/env python3
"""
üß™ TEST BOTLIVE OPTIMIS√â - Bas√© sur le prompt r√©el
Teste les r√®gles critiques, cas limites et robustesse du syst√®me
"""

import asyncio
import httpx
import json
from datetime import datetime
from typing import Dict, Any, List

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# CONFIGURATION
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

API_URL = "http://127.0.0.1:8002/chat"
COMPANY_ID = "MpfnlSbqwaZ6F4HvxQLRL9du0yG3"
USER_ID = "testuser771"

# URLs des images de test
IMAGE_PRODUIT = "https://scontent.xx.fbcdn.net/v/t1.15752-9/555093895_1506934760640757_7691238582667886705_n.jpg?_nc_cat=105&ccb=1-7&_nc_sid=eb2e90&_nc_ohc=kDcMQu-KK7UQ7kNvwEZy_Sa&_nc_oc=Admrj1kORWldgvUTjDrjJPtKXzzI7yOdEEeTRj3U6gm081XFk4OXWJPvxscHf17n282JSOKe1c-YlxdPALQp2oH5&_nc_ad=z-m&_nc_cid=0&_nc_zt=23&_nc_ht=scontent.xx&oh=03_Q7cD3gEnLOFlNSwtbPciYqrsBG0XtHmSNcTp7TSzawows_cmpg&oe=690CE0BF"
IMAGE_PAIEMENT_VALIDE = "https://ilbihprkxcgsigvueeme.supabase.co/storage/v1/object/public/product-images/botlive/MpfnlSbqwaZ6F4HvxQLRL9du0yG3/2025/10/07/botlive_lv58r6zz.jpg"
IMAGE_PAIEMENT_INSUFFISANT = "https://scontent.xx.fbcdn.net/v/t1.15752-9/556908482_1314851517042795_6410429215345539018_n.jpg"

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# SC√âNARIOS DE TEST OPTIMIS√âS
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

TEST_SCENARIOS = [
    # ‚ïê‚ïê‚ïê WORKFLOW NORMAL ‚ïê‚ïê‚ïê
    {
        "name": "üéØ WORKFLOW COMPLET NORMAL",
        "steps": [
            {
                "step": 0,
                "name": "Salutation initiale",
                "message": "Salut",
                "images": [],
                "expected_thinking": ["Produit=‚úó", "√âtape=0", "Action=demander photo produit"],
                "expected_response": ["photo", "produit"],
                "critical_rules": [1, 8]  # Consulter historique + progresser 0‚Üí5
            },
            {
                "step": 1,
                "name": "Envoi produit",
                "message": "",
                "images": [IMAGE_PRODUIT],
                "expected_thinking": ["Produit=‚úì VISION", "√âtape=1", "Action=demander confirmation"],
                "expected_response": ["photo re√ßue", "c'est bien", "produit", "d√©p√¥t", "2000"],
                "critical_rules": [4, 13]  # Jamais nom produit + confirmation g√©n√©rique
            },
            {
                "step": 2,
                "name": "Confirmation produit + d√©tails",
                "message": "Oui je vais en prendre 3 paquets",
                "images": [],
                "expected_thinking": ["Produit=‚úì", "D√©tails=‚úì", "√âtape=2", "Action=demander"],
                "expected_response": ["not√©", "3", "capture", "d√©p√¥t"],
                "critical_rules": [2, 3]  # MESSAGE > HISTORIQUE + nouveaux d√©tails
            },
            {
                "step": 3,
                "name": "Paiement valide",
                "message": "",
                "images": [IMAGE_PAIEMENT_VALIDE],
                "expected_thinking": ["Paiement=‚úì", "‚â• 2000", "√âtape=3", "Action=valider"],
                "expected_response": ["d√©p√¥t valid√©", "adresse", "num√©ro"],
                "critical_rules": [11]  # Validation paiement
            },
            {
                "step": 4,
                "name": "Adresse Cocody",
                "message": "Cocody",
                "images": [],
                "expected_thinking": ["Adresse=‚úì", "√âtape=4", "Action=demander num√©ro"],
                "expected_response": ["cocody", "1500", "num√©ro"],
                "critical_rules": [5]  # Commune ‚Üí frais exact
            },
            {
                "step": 5,
                "name": "Num√©ro final",
                "message": "0140236939",
                "images": [],
                "expected_thinking": ["T√©l√©phone=‚úì", "√âtape=5", "Action=confirmer"],
                "expected_response": ["c'est bon", "commande ok", "1500", "24h"],
                "critical_rules": [8]  # Progresser 0‚Üí5
            }
        ]
    },
    
    # ‚ïê‚ïê‚ïê CAS LIMITES CRITIQUES ‚ïê‚ïê‚ïê
    {
        "name": "‚ö†Ô∏è R√àGLES CRITIQUES - PAIEMENT",
        "steps": [
            {
                "step": 0,
                "name": "Setup produit",
                "message": "Bonjour",
                "images": [IMAGE_PRODUIT],
                "expected_thinking": ["Produit=‚úì"],
                "expected_response": ["photo re√ßue"],
                "critical_rules": []
            },
            {
                "step": 1,
                "name": "Confirmation produit",
                "message": "Oui",
                "images": [],
                "expected_thinking": ["Produit=‚úì"],
                "expected_response": ["capture", "d√©p√¥t"],
                "critical_rules": []
            },
            {
                "step": 2,
                "name": "‚ùå Paiement insuffisant (202 FCFA)",
                "message": "",
                "images": [IMAGE_PAIEMENT_INSUFFISANT],
                "expected_thinking": ["Paiement=‚úó", "202 < 2000", "insuffisant"],
                "expected_response": ["insuffisant", "manque", "1798", "fcfa"],
                "critical_rules": [11]  # Validation paiement stricte
            },
            {
                "step": 3,
                "name": "‚úÖ Paiement corrig√© (2020 FCFA)",
                "message": "",
                "images": [IMAGE_PAIEMENT_VALIDE],
                "expected_thinking": ["Paiement=‚úì", "2020 ‚â• 2000"],
                "expected_response": ["d√©p√¥t valid√©", "2020"],
                "critical_rules": [11]  # Validation paiement
            }
        ]
    },
    
    # ‚ïê‚ïê‚ïê HI√âRARCHIE HISTORIQUE ‚ïê‚ïê‚ïê
    {
        "name": "üîÑ R√àGLE 12 - HI√âRARCHIE PAIEMENT",
        "steps": [
            {
                "step": 0,
                "name": "Setup complet avec paiement valid√©",
                "message": "Bonjour",
                "images": [IMAGE_PRODUIT],
                "expected_thinking": [],
                "expected_response": [],
                "critical_rules": []
            },
            {
                "step": 1,
                "name": "Confirmation + paiement",
                "message": "Oui",
                "images": [IMAGE_PAIEMENT_VALIDE],
                "expected_thinking": ["Paiement=‚úì"],
                "expected_response": ["d√©p√¥t valid√©"],
                "critical_rules": []
            },
            {
                "step": 2,
                "name": "üö® Test hi√©rarchie - Ne pas redemander paiement",
                "message": "Je veux changer la quantit√© √† 5",
                "images": [],
                "expected_thinking": ["Paiement=‚úì HISTORIQUE", "JAMAIS redemander"],
                "expected_response": ["not√©", "5"],
                "expected_not_response": ["d√©p√¥t", "capture", "paiement"],
                "critical_rules": [12]  # Hi√©rarchie paiement CRITIQUE
            }
        ]
    },
    
    # ‚ïê‚ïê‚ïê HORS DOMAINE ‚ïê‚ïê‚ïê
    {
        "name": "üö´ HORS DOMAINE",
        "steps": [
            {
                "step": 0,
                "name": "Question m√©t√©o",
                "message": "Quel temps fait-il ?",
                "images": [],
                "expected_thinking": ["hors domaine"],
                "expected_response": ["ia assistante commande", "+225 07 87 36 07 57"],
                "critical_rules": [10]  # Hors domaine
            },
            {
                "step": 1,
                "name": "Question politique",
                "message": "Que penses-tu du pr√©sident ?",
                "images": [],
                "expected_thinking": ["hors domaine"],
                "expected_response": ["ia assistante commande", "+225 07 87 36 07 57"],
                "critical_rules": [10]  # Hors domaine
            }
        ]
    },
    
    # ‚ïê‚ïê‚ïê ZONES LIVRAISON ‚ïê‚ïê‚ïê
    {
        "name": "üìç ZONES ET FRAIS LIVRAISON",
        "steps": [
            {
                "step": 0,
                "name": "Setup rapide",
                "message": "Bonjour",
                "images": [IMAGE_PRODUIT],
                "expected_thinking": [],
                "expected_response": [],
                "critical_rules": []
            },
            {
                "step": 1,
                "name": "Paiement direct",
                "message": "Oui",
                "images": [IMAGE_PAIEMENT_VALIDE],
                "expected_thinking": [],
                "expected_response": [],
                "critical_rules": []
            },
            {
                "step": 2,
                "name": "Zone Centre (1500 FCFA)",
                "message": "Yopougon",
                "images": [],
                "expected_thinking": ["Adresse=‚úì"],
                "expected_response": ["yopougon", "1500"],
                "critical_rules": [5]  # Frais exact
            },
            {
                "step": 3,
                "name": "Changement zone P√©riph√©rie (2000 FCFA)",
                "message": "Finalement Port-Bou√´t",
                "images": [],
                "expected_thinking": ["Adresse=‚úì"],
                "expected_response": ["port-bou√´t", "2000"],
                "critical_rules": [5]  # Frais exact
            }
        ]
    }
]

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# FONCTIONS UTILITAIRES
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def print_header(text: str):
    """Affiche un en-t√™te color√©"""
    print(f"\n\033[96m{'='*80}\033[0m")
    print(f"\033[96m{text.center(80)}\033[0m")
    print(f"\033[96m{'='*80}\033[0m\n")

def print_scenario_header(scenario_name: str, scenario_num: int, total: int):
    """Affiche l'en-t√™te de sc√©nario"""
    print(f"\n\033[95müß™ SC√âNARIO {scenario_num}/{total}: {scenario_name}\033[0m")
    print("‚îÄ" * 80)

def print_step(step_num: int, step_name: str):
    """Affiche le num√©ro d'√©tape"""
    print(f"\n\033[93müìç √âTAPE {step_num}: {step_name}\033[0m")

def print_test_summary(question: str, thinking: str, response: str, response_data: dict, request_time: float):
    """Affiche un r√©sum√© format√© identique √† la production"""
    # Codes couleur ANSI
    BLUE = '\033[94m'
    YELLOW = '\033[93m'
    GREEN = '\033[92m'
    RED = '\033[91m'
    CYAN = '\033[96m'
    MAGENTA = '\033[95m'
    RESET = '\033[0m'
    BOLD = '\033[1m'
    
    print("\n" + "="*80)
    print(f"{BOLD}üîµ QUESTION CLIENT:{RESET}")
    print(f"{BLUE}{question if question else '[IMAGE]'}{RESET}")
    print()
    
    if thinking and thinking.strip() and thinking != "...":
        print(f"{BOLD}üü° RAISONNEMENT LLM:{RESET}")
        thinking_lines = thinking.strip().split('\n')
        for line in thinking_lines:
            if line.strip():
                print(f"{YELLOW}{line.strip()}{RESET}")
        print()
    
    print(f"{BOLD}üü¢ R√âPONSE AU CLIENT:{RESET}")
    print(f"{GREEN}{response}{RESET}")
    print()
    
    # Extraire m√©triques du syst√®me hybride
    if not response_data or not isinstance(response_data, dict):
        response_data = {}
    
    llm_used = response_data.get('llm_used', 'inconnu')
    prompt_tokens = response_data.get('prompt_tokens', 0)
    completion_tokens = response_data.get('completion_tokens', 0)
    total_tokens = prompt_tokens + completion_tokens if (prompt_tokens or completion_tokens) else 0
    total_cost = response_data.get('total_cost', 0.0)
    router_metrics = response_data.get('router_metrics', {})
    timings = response_data.get('timings', {})
    processing_time = response_data.get('processing_time', request_time)
    
    print(f"{BOLD}üî¥ TOKENS R√âELS & CO√õTS:{RESET}")
    
    # Calculer co√ªts selon mod√®le
    if "deepseek" in llm_used.lower():
        input_cost = (prompt_tokens / 1_000_000) * 0.08
        output_cost = (completion_tokens / 1_000_000) * 0.12
        cost_detail = f"${input_cost:.6f} input + ${output_cost:.6f} output"
    else:
        input_cost = (prompt_tokens / 1_000_000) * 0.59
        output_cost = (completion_tokens / 1_000_000) * 0.79
        cost_detail = f"${input_cost:.6f} input + ${output_cost:.6f} output"
    
    print(f"{RED}Prompt: {prompt_tokens} | Completion: {completion_tokens} | TOTAL: {total_tokens}{RESET}")
    print(f"{RED}üí∞ CO√õT LLM: ${total_cost:.6f} ({cost_detail}){RESET}")
    
    # M√©triques routeur HYDE
    if router_metrics and router_metrics.get('tokens', 0) > 0:
        router_tokens = router_metrics.get('tokens', 0)
        router_cost = router_metrics.get('cost', 0.0)
        print(f"{RED}üí∞ CO√õT ROUTEUR HYDE (8B): ${router_cost:.6f} ({router_tokens} tokens){RESET}")
        total_with_router = total_cost + router_cost
        print(f"{RED}üí∞ CO√õT TOTAL: ${total_with_router:.6f}{RESET}")
    else:
        print(f"{RED}üí∞ CO√õT TOTAL: ${total_cost:.6f}{RESET}")
    
    print(f"{RED}ü§ñ MOD√àLE: {llm_used}{RESET}")
    print()
    
    # Temps d'ex√©cution
    print(f"{BOLD}‚è±Ô∏è  TEMPS D'EX√âCUTION:{RESET}")
    if timings:
        print(f"{CYAN}‚îå‚îÄ √âtapes d√©taill√©es:{RESET}")
        
        if 'routing' in timings:
            routing_time = timings['routing']*1000
            if router_metrics and router_metrics.get('tokens', 0) > 0:
                router_tokens = router_metrics.get('tokens', 0)
                router_cost_fcfa = router_metrics.get('cost', 0) * 600
                print(f"{CYAN}‚îú‚îÄ‚îÄ 1. Routage HYDE (8B): {routing_time:.2f}ms | {router_tokens} tokens | {router_cost_fcfa:.4f} FCFA{RESET}")
            else:
                print(f"{CYAN}‚îú‚îÄ‚îÄ 1. Routage intelligent: {routing_time:.2f}ms{RESET}")
        
        if 'prompt_generation' in timings:
            print(f"{CYAN}‚îú‚îÄ‚îÄ 2. G√©n√©ration prompt: {timings['prompt_generation']*1000:.2f}ms{RESET}")
        
        if 'llm_call' in timings:
            print(f"{CYAN}‚îú‚îÄ‚îÄ 3. Appel LLM ({llm_used}): {timings['llm_call']*1000:.2f}ms{RESET}")
        
        if 'tools_execution' in timings:
            tools_time = timings['tools_execution']*1000
            if tools_time > 0.1:
                print(f"{CYAN}‚îú‚îÄ‚îÄ 4. Ex√©cution outils: {tools_time:.2f}ms{RESET}")
            else:
                print(f"{CYAN}‚îú‚îÄ‚îÄ 4. Ex√©cution outils: <0.1ms (aucun outil){RESET}")
        
        print(f"{CYAN}‚îî‚îÄ‚îÄ {RESET}")
    
    print(f"{MAGENTA}{BOLD}‚è±Ô∏è  TEMPS TOTAL REQU√äTE: {processing_time*1000:.2f}ms ({processing_time:.3f}s){RESET}")
    print("="*80 + "\n")

def extract_thinking_response(response_text: str) -> tuple:
    """Extrait thinking et response du texte LLM"""
    import re
    thinking_match = re.search(r'<thinking>(.*?)</thinking>', response_text, re.DOTALL)
    response_match = re.search(r'<response>(.*?)</response>', response_text, re.DOTALL)
    
    thinking = thinking_match.group(1).strip() if thinking_match else ""
    response = response_match.group(1).strip() if response_match else response_text
    
    return thinking, response

def extract_cost_info(response_data: Dict) -> Dict:
    """Extrait les informations de co√ªt et tokens de la r√©ponse"""
    try:
        # Chercher dans diff√©rents endroits possibles
        usage = response_data.get("usage", {})
        if usage:
            input_tokens = usage.get("prompt_tokens", 0)
            output_tokens = usage.get("completion_tokens", 0)
            total_tokens = usage.get("total_tokens", input_tokens + output_tokens)
            
            # D√©tecter le mod√®le r√©ellement utilis√©
            actual_model = response_data.get("model", "unknown")
            
            # Calcul co√ªt selon le mod√®le d√©tect√©
            if "deepseek" in actual_model.lower():
                # DeepSeek V3 pricing
                input_cost = (input_tokens / 1000000) * 0.14  # $0.14 per 1M tokens
                output_cost = (output_tokens / 1000000) * 1.10  # $1.10 per 1M tokens
                provider = "DEEPSEEK"
            elif "llama" in actual_model.lower() and "8b" in actual_model.lower():
                # Groq 8B pricing
                input_cost = (input_tokens / 1000000) * 0.05  # $0.05 per 1M tokens
                output_cost = (output_tokens / 1000000) * 0.08  # $0.08 per 1M tokens
                provider = "GROQ-8B"
            elif "llama" in actual_model.lower() and "70b" in actual_model.lower():
                # Groq 70B pricing
                input_cost = (input_tokens / 1000000) * 0.59  # $0.59 per 1M tokens
                output_cost = (output_tokens / 1000000) * 0.79  # $0.79 per 1M tokens
                provider = "GROQ-70B"
            else:
                # Fallback pricing
                input_cost = (input_tokens / 1000000) * 0.10
                output_cost = (output_tokens / 1000000) * 0.10
                provider = "UNKNOWN"
            
            total_cost = input_cost + output_cost
            
            return {
                "input_tokens": input_tokens,
                "output_tokens": output_tokens,
                "total_tokens": total_tokens,
                "input_cost": input_cost,
                "output_cost": output_cost,
                "total_cost": total_cost,
                "model": actual_model,
                "provider": provider
            }
    except Exception as e:
        print(f"Erreur extraction co√ªt: {e}")
    
    return None

def validate_step(thinking: str, response: str, step_config: Dict) -> Dict:
    """Valide une √©tape selon les crit√®res"""
    validation = {
        "thinking_valid": False,
        "response_valid": False,
        "critical_rules_ok": [],
        "critical_rules_failed": [],
        "score": 0,
        "details": []
    }
    
    thinking_lower = thinking.lower()
    response_lower = response.lower()
    
    # V√©rifier thinking attendu
    expected_thinking = step_config.get("expected_thinking", [])
    thinking_found = 0
    for expected in expected_thinking:
        if expected.lower() in thinking_lower:
            thinking_found += 1
            validation["details"].append(f"‚úÖ Thinking: '{expected}' trouv√©")
        else:
            validation["details"].append(f"‚ùå Thinking: '{expected}' manquant")
    
    validation["thinking_valid"] = thinking_found >= len(expected_thinking) * 0.7  # 70% minimum
    
    # V√©rifier response attendue
    expected_response = step_config.get("expected_response", [])
    response_found = 0
    for expected in expected_response:
        if expected.lower() in response_lower:
            response_found += 1
            validation["details"].append(f"‚úÖ Response: '{expected}' trouv√©")
        else:
            validation["details"].append(f"‚ùå Response: '{expected}' manquant")
    
    # V√©rifier response interdite
    expected_not_response = step_config.get("expected_not_response", [])
    for not_expected in expected_not_response:
        if not_expected.lower() in response_lower:
            validation["details"].append(f"üö® Response: '{not_expected}' INTERDIT trouv√©")
            response_found -= 1  # P√©nalit√©
        else:
            validation["details"].append(f"‚úÖ Response: '{not_expected}' correctement absent")
    
    validation["response_valid"] = response_found >= len(expected_response) * 0.7  # 70% minimum
    
    # V√©rifier r√®gles critiques
    critical_rules = step_config.get("critical_rules", [])
    for rule_num in critical_rules:
        rule_ok = validate_critical_rule(rule_num, thinking, response, step_config)
        if rule_ok:
            validation["critical_rules_ok"].append(rule_num)
        else:
            validation["critical_rules_failed"].append(rule_num)
    
    # Calculer score
    score = 0
    if validation["thinking_valid"]:
        score += 30
    if validation["response_valid"]:
        score += 40
    if len(validation["critical_rules_failed"]) == 0 and critical_rules:
        score += 30
    elif len(validation["critical_rules_ok"]) > 0:
        score += 15  # Partiel
    
    validation["score"] = score
    return validation

def validate_critical_rule(rule_num: int, thinking: str, response: str, step_config: Dict) -> bool:
    """Valide une r√®gle critique sp√©cifique"""
    thinking_lower = thinking.lower()
    response_lower = response.lower()
    
    if rule_num == 1:  # Consulter HISTORIQUE
        return "historique" in thinking_lower
    elif rule_num == 4:  # Jamais nom produit
        return "produit" in response_lower and not any(word in response_lower for word in ["couche", "biberon", "lait", "pampers"])
    elif rule_num == 5:  # Frais exact
        return any(frais in response_lower for frais in ["1500", "2000", "2500"])
    elif rule_num == 8:  # Progresser 0‚Üí5
        return "√©tape=" in thinking_lower
    elif rule_num == 10:  # Hors domaine
        return "ia assistante commande" in response_lower and "07 87 36 07 57" in response_lower
    elif rule_num == 11:  # Validation paiement
        return ("paiement=‚úì" in thinking_lower or "paiement=‚úó" in thinking_lower) and ("‚â•" in thinking_lower or "<" in thinking_lower or "insuffisant" in thinking_lower)
    elif rule_num == 12:  # Hi√©rarchie paiement
        return "historique" in thinking_lower and "jamais redemander" in thinking_lower
    elif rule_num == 13:  # Confirmation produit
        return "c'est bien" in response_lower and "produit" in response_lower
    
    return True  # R√®gle non impl√©ment√©e = OK par d√©faut

async def send_message(message: str, images: List[str]) -> Dict[str, Any]:
    """Envoie un message √† l'API"""
    payload = {
        "company_id": COMPANY_ID,
        "user_id": USER_ID,
        "message": message,
        "images": images,
        "botlive_enabled": True,
        "rag_enabled": True
    }
    
    async with httpx.AsyncClient(timeout=120.0) as client:
        response = await client.post(API_URL, json=payload)
        response.raise_for_status()
        return response.json()

async def reset_conversation():
    """Reset la conversation en changeant d'utilisateur"""
    global USER_ID
    USER_ID = f"testuser771-{datetime.now().strftime('%H%M%S')}"
    print(f"üîÑ Reset conversation - Nouvel utilisateur: {USER_ID}")

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# FONCTION PRINCIPALE
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

async def run_optimized_test():
    """Ex√©cute tous les sc√©narios de test optimis√©s"""
    print_header("üß™ TEST BOTLIVE OPTIMIS√â - R√àGLES CRITIQUES")
    
    start_time = datetime.now()
    all_results = []
    total_scenarios = len(TEST_SCENARIOS)
    
    for scenario_idx, scenario in enumerate(TEST_SCENARIOS, 1):
        scenario_name = scenario["name"]
        steps = scenario["steps"]
        
        print_scenario_header(scenario_name, scenario_idx, total_scenarios)
        
        # Reset conversation pour chaque sc√©nario
        await reset_conversation()
        
        scenario_results = []
        scenario_score = 0
        
        for step_config in steps:
            step_num = step_config["step"]
            step_name = step_config["name"]
            message = step_config["message"]
            images = step_config["images"]
            
            print_step(step_num, step_name)
            
            try:
                # Envoyer le message avec mesure du temps
                start_request = datetime.now()
                print(f"üì§ Message: '{message}' + {len(images)} image(s)")
                response_data = await send_message(message, images)
                end_request = datetime.now()
                request_time = (end_request - start_request).total_seconds()
                
                # Extraire thinking/response selon structure de r√©ponse
                # Structure r√©elle: response_data['response'] contient toutes les m√©triques
                if isinstance(response_data, dict) and 'response' in response_data:
                    if isinstance(response_data['response'], dict):
                        # Structure confirm√©e: response_data['response'] = dict avec tout dedans
                        inner_response = response_data['response']
                        
                        # DEBUG: Afficher TOUTES les cl√©s disponibles
                        print(f"\nüîç DEBUG COMPLET inner_response:")
                        for key in inner_response.keys():
                            value = inner_response[key]
                            if isinstance(value, (str, int, float, bool)):
                                print(f"   {key}: {value}")
                            elif isinstance(value, dict):
                                print(f"   {key}: dict avec {len(value)} cl√©s -> {list(value.keys())}")
                            elif isinstance(value, list):
                                print(f"   {key}: list de {len(value)} √©l√©ments")
                            else:
                                print(f"   {key}: {type(value).__name__}")
                        print()
                        
                        # Extraire le texte de r√©ponse
                        response_text = inner_response.get('response', str(inner_response))
                        thinking = inner_response.get('thinking', '')
                        
                        # Extraire thinking/response si format XML
                        if not thinking and ("<thinking>" in response_text or "<response>" in response_text):
                            thinking, response = extract_thinking_response(response_text)
                        else:
                            response = response_text
                        
                        # Toutes les m√©triques sont dans inner_response
                        hybrid_data = {
                            'llm_used': inner_response.get('llm_used', 'inconnu'),
                            'prompt_tokens': inner_response.get('prompt_tokens', 0),
                            'completion_tokens': inner_response.get('completion_tokens', 0),
                            'total_cost': inner_response.get('total_cost', 0.0),
                            'router_metrics': inner_response.get('router_metrics', {}),
                            'timings': inner_response.get('timings', {}),
                            'processing_time': inner_response.get('processing_time', request_time),
                            'thinking': thinking
                        }
                    elif isinstance(response_data['response'], str):
                        # Cas rare: response directement string
                        response_text = response_data['response']
                        thinking, response = extract_thinking_response(response_text)
                        hybrid_data = {'thinking': thinking}
                    else:
                        response_text = str(response_data)
                        thinking, response = extract_thinking_response(response_text)
                        hybrid_data = {}
                else:
                    response_text = str(response_data)
                    thinking, response = extract_thinking_response(response_text)
                    hybrid_data = {}
                
                # Affichage format√© identique √† la production
                print_test_summary(message, thinking, response, hybrid_data, request_time)
                
                # Valider l'√©tape
                validation = validate_step(thinking, response, step_config)
                
                # Afficher validation
                score = validation["score"]
                if score >= 80:
                    status = "\033[92m‚úÖ EXCELLENT\033[0m"
                elif score >= 60:
                    status = "\033[93m‚ö†Ô∏è ACCEPTABLE\033[0m"
                else:
                    status = "\033[91m‚ùå √âCHEC\033[0m"
                
                print(f"\nüìä {status} ({score}/100)")
                
                # D√©tails validation
                for detail in validation["details"][:3]:  # Limiter l'affichage
                    print(f"   {detail}")
                
                if validation["critical_rules_failed"]:
                    print(f"   üö® R√®gles critiques √©chou√©es: {validation['critical_rules_failed']}")
                
                print()  # Ligne vide pour s√©paration
                
                scenario_results.append({
                    "step": step_num,
                    "name": step_name,
                    "validation": validation,
                    "thinking": thinking,
                    "response": response
                })
                
                scenario_score += score
                
                # Pause entre √©tapes
                await asyncio.sleep(1)
                
            except Exception as e:
                print(f"\n\033[91m‚ùå ERREUR: {e}\033[0m")
                scenario_results.append({
                    "step": step_num,
                    "name": step_name,
                    "error": str(e)
                })
        
        # R√©sum√© sc√©nario
        avg_score = scenario_score / len(steps) if steps else 0
        print(f"\nüìä Score sc√©nario: {avg_score:.1f}/100")
        
        all_results.append({
            "scenario": scenario_name,
            "average_score": avg_score,
            "steps": scenario_results
        })
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # RAPPORT FINAL
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    end_time = datetime.now()
    duration = (end_time - start_time).total_seconds()
    
    print_header("üìä RAPPORT FINAL OPTIMIS√â")
    
    total_score = sum(r["average_score"] for r in all_results)
    global_avg = total_score / len(all_results)
    
    print(f"‚è±Ô∏è Dur√©e totale: {duration:.1f}s")
    print(f"üìà Score global: {global_avg:.1f}/100")
    print(f"üß™ Sc√©narios test√©s: {len(all_results)}")
    
    print(f"\nüìã R√âSULTATS PAR SC√âNARIO:")
    for result in all_results:
        score = result["average_score"]
        if score >= 80:
            status = "‚úÖ EXCELLENT"
        elif score >= 60:
            status = "‚ö†Ô∏è ACCEPTABLE"
        else:
            status = "‚ùå √âCHEC"
        
        print(f"   {status} {result['scenario']}: {score:.1f}/100")
    
    # Verdict final
    print(f"\n{'='*80}")
    if global_avg >= 80:
        print(f"\033[92müéâ SUCC√àS ! Syst√®me Botlive robuste et conforme aux r√®gles critiques.\033[0m")
    elif global_avg >= 60:
        print(f"\033[93m‚ö†Ô∏è ACCEPTABLE. Quelques r√®gles critiques √† renforcer.\033[0m")
    else:
        print(f"\033[91m‚ùå √âCHEC. R√®gles critiques non respect√©es - Corrections urgentes.\033[0m")
    print(f"{'='*80}\n")
    
    # Sauvegarder rapport
    report_file = f"test_botlive_optimized_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(report_file, "w", encoding="utf-8") as f:
        json.dump({
            "timestamp": datetime.now().isoformat(),
            "duration_seconds": duration,
            "global_average_score": global_avg,
            "scenarios": all_results
        }, f, indent=2, ensure_ascii=False)
    
    print(f"üíæ Rapport d√©taill√©: {report_file}")

if __name__ == "__main__":
    try:
        asyncio.run(run_optimized_test())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Test interrompu par l'utilisateur")
    except Exception as e:
        print(f"\n\n‚ùå ERREUR FATALE: {e}")
        import traceback
        traceback.print_exc()
