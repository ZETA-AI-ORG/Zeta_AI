#!/usr/bin/env python3
"""
üß™ TEST VALEURS HARDCOD√âES - V√©rification Botlive Rue du Grossiste
V√©rifie que toutes les valeurs sp√©cifiques sont bien hardcod√©es dans les prompts
"""

import sys
from core.botlive_prompts_hardcoded import GROQ_70B_PROMPT, DEEPSEEK_V3_PROMPT, format_prompt

def test_hardcoded_values():
    """
    Teste que toutes les valeurs hardcod√©es sont pr√©sentes dans les prompts
    """
    print("üß™ TEST DES VALEURS HARDCOD√âES BOTLIVE\n")
    print("=" * 80)
    
    tests_passed = 0
    tests_failed = 0
    
    # Liste des tests √† effectuer
    tests = [
        # Format: (nom_test, valeur_√†_chercher, prompt_groq, prompt_deepseek)
        ("Nom entreprise", "Rue du Grossiste", True, True),
        ("Nom bot", "Jessica", True, True),
        ("T√©l√©phone support", "+225 07 87 36 07 57", True, True),
        ("Num√©ro mobile money", "d√©p√¥t mobile money sur +225 07 87 36 07 57", True, True),
        ("Preuve paiement", "capture prouvant paiement", True, True),
        ("Devise FCFA", "FCFA", True, True),
        ("D√©lai 13h", "avant 13h", True, True),
        ("Livraison jour m√™me", "jour m√™me", True, True),
        ("Livraison lendemain", "lendemain", True, True),
        ("Zone Yopougon", "Yopougon", True, True),
        ("Zone Cocody", "Cocody", True, True),
        ("Tarif centre 1500", "1500 FCFA", True, True),
        ("Tarif p√©riph√©rie 2000", "2000 FCFA", True, True),
        ("Tarif √©loign√© 2500", "2500 FCFA", True, True),
        ("Ton d√©contract√©", "D√©contract√©-pro, tutoiement", True, True),
        ("Secteur produits b√©b√©s", "produits b√©b√©s", False, True),  # Seulement DeepSeek
        ("Exemple notepad FCFA", "‚úÖPAIEMENT:2020 FCFA", True, True),
        ("Exemple zone FCFA", "‚úÖZONE:Yopougon-1500 FCFA", True, True),
    ]
    
    # Ex√©cuter les tests
    for test_name, search_value, check_groq, check_deepseek in tests:
        print(f"\nüîç Test: {test_name}")
        print(f"   Recherche: '{search_value}'")
        
        # Test Groq 70B
        if check_groq:
            if search_value in GROQ_70B_PROMPT:
                print(f"   ‚úÖ Groq 70B: TROUV√â")
                tests_passed += 1
            else:
                print(f"   ‚ùå Groq 70B: NON TROUV√â")
                tests_failed += 1
        
        # Test DeepSeek V3
        if check_deepseek:
            if search_value in DEEPSEEK_V3_PROMPT:
                print(f"   ‚úÖ DeepSeek V3: TROUV√â")
                tests_passed += 1
            else:
                print(f"   ‚ùå DeepSeek V3: NON TROUV√â")
                tests_failed += 1
    
    # Test format_prompt avec valeur par d√©faut
    print(f"\nüîç Test: Valeur par d√©faut expected_deposit")
    formatted = format_prompt("groq-70b", question="test")
    if "2000" in formatted or "{expected_deposit}" in formatted:
        print(f"   ‚úÖ Valeur par d√©faut: OK")
        tests_passed += 1
    else:
        print(f"   ‚ùå Valeur par d√©faut: ERREUR")
        tests_failed += 1
    
    # V√©rifier absence de placeholders {{VARIABLE}}
    print(f"\nüîç Test: Absence de placeholders non remplis")
    import re
    
    placeholders_groq = re.findall(r'\{\{([A-Z_]+)\}\}', GROQ_70B_PROMPT)
    placeholders_deepseek = re.findall(r'\{\{([A-Z_]+)\}\}', DEEPSEEK_V3_PROMPT)
    
    if not placeholders_groq:
        print(f"   ‚úÖ Groq 70B: Aucun placeholder {{VARIABLE}}")
        tests_passed += 1
    else:
        print(f"   ‚ùå Groq 70B: Placeholders trouv√©s: {placeholders_groq}")
        tests_failed += 1
    
    if not placeholders_deepseek:
        print(f"   ‚úÖ DeepSeek V3: Aucun placeholder {{VARIABLE}}")
        tests_passed += 1
    else:
        print(f"   ‚ùå DeepSeek V3: Placeholders trouv√©s: {placeholders_deepseek}")
        tests_failed += 1
    
    # R√©sum√©
    print("\n" + "=" * 80)
    print(f"\nüìä R√âSULTATS:")
    print(f"   ‚úÖ Tests r√©ussis: {tests_passed}")
    print(f"   ‚ùå Tests √©chou√©s: {tests_failed}")
    print(f"   üìà Taux de r√©ussite: {(tests_passed / (tests_passed + tests_failed) * 100):.1f}%")
    
    if tests_failed == 0:
        print("\nüéâ SUCC√àS TOTAL! Toutes les valeurs sont bien hardcod√©es!")
        return 0
    else:
        print(f"\n‚ö†Ô∏è ATTENTION: {tests_failed} test(s) √©chou√©(s)")
        return 1

def test_prompt_formatting():
    """
    Teste le formatage des prompts avec diff√©rents contextes
    """
    print("\n\n" + "=" * 80)
    print("üß™ TEST FORMATAGE PROMPTS\n")
    
    # Test 1: Formatage basique
    print("üîç Test 1: Formatage basique")
    try:
        formatted = format_prompt(
            "groq-70b",
            conversation_history="Client: Bonjour",
            question="Je veux commander",
            detected_objects="[produit d√©tect√©]",
            filtered_transactions="[2000 FCFA]",
            expected_deposit="2000"
        )
        
        # V√©rifier que les variables sont bien remplac√©es
        if "{conversation_history}" not in formatted and "Bonjour" in formatted:
            print("   ‚úÖ Variables remplac√©es correctement")
        else:
            print("   ‚ùå Probl√®me de remplacement des variables")
            return 1
        
        # V√©rifier pr√©sence valeurs hardcod√©es
        if "Jessica" in formatted and "+225 07 87 36 07 57" in formatted:
            print("   ‚úÖ Valeurs hardcod√©es pr√©sentes")
        else:
            print("   ‚ùå Valeurs hardcod√©es manquantes")
            return 1
            
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return 1
    
    # Test 2: Formatage DeepSeek
    print("\nüîç Test 2: Formatage DeepSeek V3")
    try:
        formatted = format_prompt(
            "deepseek-v3",
            question="Livraison Yopougon?"
        )
        
        if "Jessica" in formatted and "produits b√©b√©s" in formatted:
            print("   ‚úÖ Prompt DeepSeek format√© correctement")
        else:
            print("   ‚ùå Probl√®me formatage DeepSeek")
            return 1
            
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return 1
    
    print("\n‚úÖ Tous les tests de formatage r√©ussis!")
    return 0

def display_prompt_info():
    """
    Affiche des informations sur les prompts
    """
    print("\n\n" + "=" * 80)
    print("üìä INFORMATIONS PROMPTS\n")
    
    print(f"üìè Longueur Groq 70B: {len(GROQ_70B_PROMPT)} caract√®res (~{len(GROQ_70B_PROMPT)//4} tokens)")
    print(f"üìè Longueur DeepSeek V3: {len(DEEPSEEK_V3_PROMPT)} caract√®res (~{len(DEEPSEEK_V3_PROMPT)//4} tokens)")
    
    # Compter occurrences de valeurs cl√©s
    print(f"\nüî¢ Occurrences dans Groq 70B:")
    print(f"   - 'Jessica': {GROQ_70B_PROMPT.count('Jessica')}")
    print(f"   - '+225 07 87 36 07 57': {GROQ_70B_PROMPT.count('+225 07 87 36 07 57')}")
    print(f"   - 'FCFA': {GROQ_70B_PROMPT.count('FCFA')}")
    print(f"   - 'Yopougon': {GROQ_70B_PROMPT.count('Yopougon')}")
    
    print(f"\nüî¢ Occurrences dans DeepSeek V3:")
    print(f"   - 'Jessica': {DEEPSEEK_V3_PROMPT.count('Jessica')}")
    print(f"   - '+225 07 87 36 07 57': {DEEPSEEK_V3_PROMPT.count('+225 07 87 36 07 57')}")
    print(f"   - 'FCFA': {DEEPSEEK_V3_PROMPT.count('FCFA')}")
    print(f"   - 'produits b√©b√©s': {DEEPSEEK_V3_PROMPT.count('produits b√©b√©s')}")

if __name__ == "__main__":
    # Ex√©cuter tous les tests
    result1 = test_hardcoded_values()
    result2 = test_prompt_formatting()
    display_prompt_info()
    
    # Code de sortie
    exit_code = max(result1, result2)
    
    if exit_code == 0:
        print("\n\n" + "=" * 80)
        print("üéâ TOUS LES TESTS R√âUSSIS!")
        print("‚úÖ Les prompts Botlive sont correctement hardcod√©s pour Rue du Grossiste")
        print("=" * 80)
    else:
        print("\n\n" + "=" * 80)
        print("‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â")
        print("V√©rifiez les erreurs ci-dessus")
        print("=" * 80)
    
    sys.exit(exit_code)
