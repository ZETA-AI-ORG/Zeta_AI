"""
üöÄ ROUTES ENHANCED - NOUVEAUX ENDPOINTS
√Ä ajouter dans app.py - endpoints parall√®les
"""

# AJOUTER CES IMPORTS AU D√âBUT DE APP.PY (apr√®s les imports existants)
"""
# üöÄ IMPORTS ENHANCED - √Ä ajouter dans app.py
from core.enhanced_rag_integration import enhanced_rag
from routes.streaming import router as streaming_router
from routes.dashboard import router as dashboard_router
from core.apm_monitoring import apm_monitor
from core.unified_cache_pro import unified_cache
from core.connection_manager_pro import connection_manager
"""

# AJOUTER CES ROUTES DANS APP.PY (apr√®s les routes existantes)
enhanced_routes_code = '''
# üöÄ ENHANCED ROUTES - NOUVEAUX ENDPOINTS PARALL√àLES

# Inclure les nouveaux routers
app.include_router(streaming_router, prefix="/api", tags=["streaming"])
app.include_router(dashboard_router, prefix="/api", tags=["dashboard"])

@app.post("/api/chat/enhanced")
@limiter.limit("30/minute")
async def chat_enhanced(request: Request, chat_request: ChatRequest):
    """
    üöÄ ENDPOINT CHAT ENHANCED
    - Tous les syst√®mes d'optimisation activ√©s
    - Cache intelligent
    - Monitoring APM
    - Optimisation tokens
    - Parall√®le √† l'endpoint existant
    """
    
    try:
        # Validation s√©curit√© (m√™me que l'original)
        validation_result = validate_user_prompt(chat_request.message)
        if validation_result['severity'] != 'LOW':
            logger.warning(f"[SECURITY_ENHANCED] Requ√™te bloqu√©e: {validation_result}")
            raise HTTPException(
                status_code=400,
                detail=f"üõ°Ô∏è Demande non autoris√©e pour des raisons de s√©curit√©: {validation_result['reason']}"
            )
        
        # Traitement enhanced
        response = await enhanced_rag.process_request_enhanced(
            message=chat_request.message,
            user_id=chat_request.user_id,
            company_id=chat_request.company_id,
            conversation_id=chat_request.conversation_id
        )
        
        return {
            "response": response['response'],
            "request_id": response['request_id'],
            "processing_time_ms": response['processing_time_ms'],
            "source": response['source'],
            "enhanced": True,
            "cached": response.get('cached', False),
            "quality_score": response.get('quality_score', 0),
            "token_optimization": response.get('token_optimization', {}),
            "timestamp": time.time()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"[CHAT_ENHANCED] Erreur: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur enhanced: {str(e)}")

@app.get("/api/system/stats")
async def get_system_stats():
    """
    üìä STATISTIQUES SYST√àME ENHANCED
    - M√©triques APM
    - Stats cache
    - Performance connexions
    """
    
    try:
        # R√©cup√©rer toutes les stats
        apm_stats = apm_monitor.get_real_time_stats()
        cache_stats = unified_cache.get_stats()
        connection_stats = connection_manager.get_connection_stats()
        
        return {
            "apm": apm_stats,
            "cache": cache_stats,
            "connections": connection_stats,
            "timestamp": time.time(),
            "status": "healthy"
        }
        
    except Exception as e:
        logger.error(f"[SYSTEM_STATS] Erreur: {e}")
        return {
            "error": str(e),
            "timestamp": time.time(),
            "status": "error"
        }

@app.post("/api/cache/clear")
async def clear_cache(company_id: str = None):
    """
    üßπ NETTOYAGE CACHE
    - Vide le cache intelligent
    - Par entreprise ou global
    """
    
    try:
        if company_id:
            # TODO: Impl√©menter clear par company
            cleared_entries = await unified_cache.clear_expired()
        else:
            # Clear global
            cleared_entries = await unified_cache.clear_expired()
        
        return {
            "message": f"Cache nettoy√©: {cleared_entries} entr√©es supprim√©es",
            "company_id": company_id,
            "timestamp": time.time()
        }
        
    except Exception as e:
        logger.error(f"[CACHE_CLEAR] Erreur: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur nettoyage cache: {str(e)}")

@app.on_event("startup")
async def startup_enhanced():
    """
    üöÄ STARTUP ENHANCED
    - Initialise tous les nouveaux syst√®mes
    - √Ä ajouter apr√®s le startup existant
    """
    
    logger.info("üöÄ Initialisation des syst√®mes enhanced...")
    
    try:
        # Initialiser le gestionnaire de connexions
        await connection_manager.initialize()
        logger.info("‚úÖ Connection manager initialis√©")
        
        # Le cache et l'APM se lancent automatiquement
        logger.info("‚úÖ Tous les syst√®mes enhanced pr√™ts")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur startup enhanced: {e}")

@app.on_event("shutdown")
async def shutdown_enhanced():
    """
    üßπ SHUTDOWN ENHANCED
    - Nettoie tous les nouveaux syst√®mes
    - √Ä ajouter apr√®s le shutdown existant
    """
    
    logger.info("üßπ Arr√™t des syst√®mes enhanced...")
    
    try:
        # Arr√™ter le monitoring
        apm_monitor.stop_monitoring()
        
        # Fermer les connexions
        await connection_manager.cleanup()
        
        logger.info("‚úÖ Syst√®mes enhanced arr√™t√©s proprement")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur shutdown enhanced: {e}")
'''

print("üìã CODE √Ä AJOUTER DANS APP.PY:")
print("="*50)
print("\n1. IMPORTS √Ä AJOUTER AU D√âBUT:")
print("-"*30)
print("""
# üöÄ IMPORTS ENHANCED
from core.enhanced_rag_integration import enhanced_rag
from routes.streaming import router as streaming_router
from routes.dashboard import router as dashboard_router
from core.apm_monitoring import apm_monitor
from core.unified_cache_pro import unified_cache
from core.connection_manager_pro import connection_manager
""")

print("\n2. ROUTES √Ä AJOUTER APR√àS LES ROUTES EXISTANTES:")
print("-"*30)
print(enhanced_routes_code)

print("\n3. MODIFICATION DU STARTUP EXISTANT:")
print("-"*30)
print("""
# Dans la fonction startup_event() existante, ajouter:
try:
    await connection_manager.initialize()
    logger.info("‚úÖ Syst√®mes enhanced initialis√©s")
except Exception as e:
    logger.error(f"‚ùå Erreur enhanced startup: {e}")
""")

print("\n4. MODIFICATION DU SHUTDOWN EXISTANT:")
print("-"*30)
print("""
# Dans la fonction shutdown_event() existante, ajouter:
try:
    apm_monitor.stop_monitoring()
    await connection_manager.cleanup()
    logger.info("‚úÖ Syst√®mes enhanced arr√™t√©s")
except Exception as e:
    logger.error(f"‚ùå Erreur enhanced shutdown: {e}")
""")

print("\n" + "="*50)
print("üéØ ENDPOINTS DISPONIBLES APR√àS INT√âGRATION:")
print("- POST /api/chat/enhanced - Chat avec optimisations")
print("- POST /api/chat/stream - Chat streaming temps r√©el")  
print("- GET /api/dashboard - Dashboard monitoring")
print("- GET /api/dashboard/api/metrics - API m√©triques")
print("- GET /api/system/stats - Statistiques syst√®me")
print("- POST /api/cache/clear - Nettoyage cache")
print("- GET /api/dashboard/health - Health check")
print("="*50)




