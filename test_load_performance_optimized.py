#!/usr/bin/env python3
"""
üî• TEST DE CHARGE OPTIMIS√â - CHATBOT RUE_DU_GROS
===============================================
Tests de charge avec param√®tres optimis√©s pour √©viter erreurs 405
"""

import asyncio
import aiohttp
import time
import statistics
import argparse
from concurrent.futures import ThreadPoolExecutor
import json
from datetime import datetime

# Configuration OPTIMIS√âE
ENDPOINT_URL = "http://127.0.0.1:8001/chat"
COMPANY_ID = "MpfnlSbqwaZ6F4HvxQLRL9du0yG3"

# Requ√™tes de test vari√©es
TEST_QUERIES = [
    "combien co√ªtent les couches taille 1",
    "livraison √† Cocody quel tarif",
    "je peux payer avec wave money",
    "num√©ro whatsapp pour commander",
    "prix couches taille 4 pour enfant 10 kg"
]

# Configuration par d√©faut OPTIMIS√âE
NUM_USERS = 10  # R√©duit drastiquement
DURATION = 60   # Test plus court
RAMP_UP_TIME = 15  # Mont√©e en charge plus douce

class OptimizedLoadTester:
    def __init__(self, num_users=10, duration=60, ramp_up=15):
        self.num_users = num_users
        self.duration = duration
        self.ramp_up = ramp_up
        self.results = []
        self.errors = []
        self.start_time = None
        
    async def single_request(self, session, user_id, query):
        """Effectue une requ√™te unique avec timeout optimis√©"""
        payload = {
            "message": query,
            "company_id": COMPANY_ID,
            "user_id": f"testuser{user_id}"
        }
        
        start_time = time.time()
        try:
            # Timeout r√©duit pour √©viter accumulation
            async with session.post(ENDPOINT_URL, json=payload, timeout=aiohttp.ClientTimeout(total=45)) as response:
                response_text = await response.text()
                end_time = time.time()
                
                result = {
                    'user_id': user_id,
                    'query': query,
                    'status_code': response.status,
                    'response_time': (end_time - start_time) * 1000,
                    'response_length': len(response_text),
                    'timestamp': end_time - self.start_time,
                    'success': response.status == 200
                }
                
                if response.status != 200:
                    result['error'] = f"HTTP {response.status}"
                    self.errors.append(result)
                else:
                    self.results.append(result)
                    
                return result
                
        except Exception as e:
            end_time = time.time()
            error_result = {
                'user_id': user_id,
                'query': query,
                'error': str(e),
                'response_time': (end_time - start_time) * 1000,
                'timestamp': end_time - self.start_time,
                'success': False
            }
            self.errors.append(error_result)
            return error_result

    async def user_simulation(self, session, user_id):
        """Simule un utilisateur avec d√©lais entre requ√™tes"""
        queries_sent = 0
        user_start_time = time.time()
        
        while (time.time() - self.start_time) < self.duration:
            query = TEST_QUERIES[queries_sent % len(TEST_QUERIES)]
            await self.single_request(session, user_id, query)
            queries_sent += 1
            
            # D√©lai entre requ√™tes pour √©viter spam
            await asyncio.sleep(8)  # 8 secondes entre requ√™tes
            
        print(f"üë§ Utilisateur {user_id}: {queries_sent} requ√™tes termin√©es")
        return queries_sent

    async def run_load_test(self):
        """Lance le test de charge optimis√©"""
        print("üî• D√âMARRAGE TEST DE CHARGE OPTIMIS√â")
        print(f"üë• Utilisateurs simultan√©s: {self.num_users}")
        print(f"‚è±Ô∏è Dur√©e: {self.duration}s")
        print(f"üìà Mont√©e en charge: {self.ramp_up}s")
        print(f"üéØ URL: {ENDPOINT_URL}")
        print("=" * 70)
        
        self.start_time = time.time()
        
        # Configuration session HTTP optimis√©e
        connector = aiohttp.TCPConnector(
            limit=20,  # Limite connexions simultan√©es
            limit_per_host=10,
            ttl_dns_cache=300,
            use_dns_cache=True,
        )
        
        timeout = aiohttp.ClientTimeout(total=60, connect=10)
        
        async with aiohttp.ClientSession(
            connector=connector,
            timeout=timeout,
            headers={"Content-Type": "application/json"}
        ) as session:
            
            tasks = []
            for i in range(self.num_users):
                # D√©lai de d√©marrage √©chelonn√©
                delay = (i * self.ramp_up) / self.num_users
                await asyncio.sleep(delay)
                print(f"üöÄ Utilisateur {i} d√©marr√© (apr√®s {delay:.1f}s)")
                
                task = asyncio.create_task(self.user_simulation(session, i))
                tasks.append(task)
            
            # Attendre que tous les utilisateurs terminent
            await asyncio.gather(*tasks, return_exceptions=True)
        
        await self.analyze_results()

    async def analyze_results(self):
        """Analyse les r√©sultats du test"""
        print("\n" + "=" * 70)
        print("üìä ANALYSE DES R√âSULTATS OPTIMIS√âS")
        print("=" * 70)
        
        total_requests = len(self.results) + len(self.errors)
        success_count = len(self.results)
        error_count = len(self.errors)
        
        success_rate = (success_count / total_requests * 100) if total_requests > 0 else 0
        
        print(f"‚úÖ Requ√™tes r√©ussies: {success_count}")
        print(f"‚ùå Erreurs: {error_count}")
        print(f"üìà Taux de succ√®s: {success_rate:.1f}%")
        
        if self.results:
            response_times = [r['response_time'] for r in self.results]
            avg_time = statistics.mean(response_times)
            median_time = statistics.median(response_times)
            p95_time = sorted(response_times)[int(len(response_times) * 0.95)] if len(response_times) > 1 else response_times[0]
            
            print(f"\n‚è±Ô∏è TEMPS DE R√âPONSE:")
            print(f"  ‚Ä¢ Moyenne: {avg_time:.1f}ms")
            print(f"  ‚Ä¢ M√©diane: {median_time:.1f}ms")
            print(f"  ‚Ä¢ P95: {p95_time:.1f}ms")
            print(f"  ‚Ä¢ Min: {min(response_times):.1f}ms")
            print(f"  ‚Ä¢ Max: {max(response_times):.1f}ms")
            
            # Throughput
            test_duration = max([r['timestamp'] for r in self.results]) if self.results else self.duration
            throughput = success_count / test_duration if test_duration > 0 else 0
            print(f"üöÄ Throughput: {throughput:.2f} req/s")
        
        # Analyse des erreurs
        if self.errors:
            error_types = {}
            for error in self.errors:
                error_type = error.get('error', 'Unknown')
                if 'HTTP' in error_type:
                    error_type = f"HTTP_{error.get('status_code', 'Unknown')}"
                error_types[error_type] = error_types.get(error_type, 0) + 1
            
            print(f"\n‚ùå ANALYSE DES ERREURS ({error_count}):")
            for error_type, count in error_types.items():
                print(f"  ‚Ä¢ {error_type}: {count} occurrences")
        
        # Verdict
        if success_rate >= 95:
            print(f"\nüèÜ VERDICT FINAL:")
            print("üü¢ EXCELLENT - Syst√®me stable et performant")
        elif success_rate >= 80:
            print(f"\nüèÜ VERDICT FINAL:")
            print("üü° BON - Quelques am√©liorations possibles")
        else:
            print(f"\nüèÜ VERDICT FINAL:")
            print("üî¥ CRITIQUE - Corrections majeures requises")
        
        # Sauvegarde
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        results_file = f"optimized_load_test_results_{timestamp}.json"
        
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump({
                'config': {
                    'num_users': self.num_users,
                    'duration': self.duration,
                    'ramp_up': self.ramp_up,
                    'success_rate': success_rate,
                    'total_requests': total_requests
                },
                'results': self.results,
                'errors': self.errors
            }, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ R√©sultats sauvegard√©s: {results_file}")

async def main():
    parser = argparse.ArgumentParser(description='Test de charge optimis√© pour chatbot RAG')
    parser.add_argument('--users', type=int, default=10, help='Nombre d\'utilisateurs simultan√©s')
    parser.add_argument('--duration', type=int, default=60, help='Dur√©e du test en secondes')
    parser.add_argument('--ramp-up', type=int, default=15, help='Dur√©e de mont√©e en charge en secondes')
    
    args = parser.parse_args()
    
    tester = OptimizedLoadTester(
        num_users=args.users,
        duration=args.duration,
        ramp_up=args.ramp_up
    )
    
    await tester.run_load_test()

if __name__ == "__main__":
    asyncio.run(main())
