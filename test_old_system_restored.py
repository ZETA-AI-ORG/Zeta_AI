#!/usr/bin/env python3
"""
Test de validation du retour √† l'ancien syst√®me sans HYDE
"""

import asyncio
import sys
import os

# Ajouter le r√©pertoire parent au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_old_system_restored():
    """Test que l'ancien syst√®me est restaur√©"""
    
    print("üß™ TEST DU RETOUR √Ä L'ANCIEN SYST√àME")
    print("=" * 50)
    
    try:
        # Importer les fonctions de recherche
        from database.vector_store import search_meili_keywords
        from database.supabase_client import get_semantic_company_context
        
        # Test 1: Recherche MeiliSearch directe
        print("\n1Ô∏è‚É£ Test recherche MeiliSearch directe:")
        query1 = "Vous vendez que des couches?"
        result1 = await search_meili_keywords(query1, "MpfnlSbqwaZ6F4HvxQLRL9du0yG3", 3)
        print(f"   Query: '{query1}'")
        print(f"   R√©sultat: {type(result1)} - {len(str(result1))} caract√®res")
        print(f"   ‚úÖ Recherche directe: {'‚úÖ' if result1 else '‚ùå'}")
        
        # Test 2: Recherche Supabase directe (avec la bonne fonction)
        print("\n2Ô∏è‚É£ Test recherche Supabase directe:")
        query2 = "Quels sont vos produits?"
        try:
            # Utiliser la bonne fonction RPC
            from database.supabase_client import match_documents_via_rpc
            from embedding_models import get_embedding_model
            
            # G√©n√©rer l'embedding
            model = get_embedding_model()
            embedding = model.encode(query2).tolist()
            
            result2 = await match_documents_via_rpc(embedding, "MpfnlSbqwaZ6F4HvxQLRL9du0yG3", 3, 0.3)
            print(f"   Query: '{query2}'")
            print(f"   R√©sultat: {type(result2)} - {len(str(result2))} caract√®res")
            print(f"   ‚úÖ Recherche directe: {'‚úÖ' if result2 else '‚ùå'}")
        except Exception as e:
            print(f"   Query: '{query2}'")
            print(f"   Erreur: {e}")
            print(f"   ‚úÖ Recherche directe: ‚ùå")
            result2 = None
        
        # Test 3: Performance
        print("\n3Ô∏è‚É£ Test performance:")
        import time
        start_time = time.time()
        await search_meili_keywords("test performance", "MpfnlSbqwaZ6F4HvxQLRL9du0yG3", 3)
        end_time = time.time()
        duration = end_time - start_time
        print(f"   Temps de recherche: {duration:.2f} secondes")
        print(f"   ‚úÖ Performance: {'‚úÖ' if duration < 5 else '‚ùå'} (< 5s)")
        
        # R√©sum√©
        print("\nüìä R√âSUM√â:")
        print(f"   - MeiliSearch direct: {'‚úÖ PASS√â' if result1 else '‚ùå √âCHOU√â'}")
        print(f"   - Supabase direct: {'‚úÖ PASS√â' if result2 else '‚ùå √âCHOU√â'}")
        print(f"   - Performance: {'‚úÖ PASS√â' if duration < 5 else '‚ùå √âCHOU√â'}")
        
        all_passed = all([result1, result2, duration < 5])
        print(f"\nüéØ R√âSULTAT FINAL: {'‚úÖ ANCIEN SYST√àME RESTAUR√â' if all_passed else '‚ùå SYST√àME ENCORE D√âFAILLANT'}")
        
        return all_passed
        
    except Exception as e:
        print(f"‚ùå ERREUR: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_old_system_restored())
    sys.exit(0 if success else 1)
