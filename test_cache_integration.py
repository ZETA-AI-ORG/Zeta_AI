#!/usr/bin/env python3
"""
üß™ TEST COMPLET DU CACHE REDIS INT√âGR√â
V√©rifie que le cache fonctionne parfaitement avec le syst√®me RAG
"""

import asyncio
import time
import requests
import json
from datetime import datetime

# Configuration du test
API_URL = "http://127.0.0.1:8001/chat"
TEST_QUERY = "BJR mme ou mr HUM VOILA dite je veux des couches culottes quels sont vos tarifs et combien la livraison a Angre?"
COMPANY_ID = "MpfnlSbqwaZ6F4HvxQLRL9du0yG3"
USER_ID = "testuser124"

def test_request(query_suffix=""):
    """Envoie une requ√™te au chatbot et mesure le temps de r√©ponse"""
    payload = {
        "message": TEST_QUERY + query_suffix,
        "company_id": COMPANY_ID,
        "user_id": USER_ID
    }
    
    headers = {
        "Content-Type": "application/json"
    }
    
    print(f"üì§ Envoi requ√™te: {payload['message'][:50]}...")
    start_time = time.time()
    
    try:
        response = requests.post(API_URL, json=payload, headers=headers, timeout=30)
        end_time = time.time()
        
        if response.status_code == 200:
            data = response.json()
            elapsed = end_time - start_time
            
            return {
                "success": True,
                "response": data,
                "elapsed_time": elapsed,
                "cached": data.get("cached", False),
                "response_length": len(data.get("response", "")),
                "cache_hit_time": data.get("cache_hit_time", "N/A")
            }
        else:
            return {
                "success": False,
                "error": f"HTTP {response.status_code}: {response.text}",
                "elapsed_time": end_time - start_time
            }
            
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "elapsed_time": time.time() - start_time
        }

def print_test_result(test_name, result):
    """Affiche les r√©sultats d'un test de mani√®re format√©e"""
    print(f"\n{'='*60}")
    print(f"üß™ {test_name}")
    print(f"{'='*60}")
    
    if result["success"]:
        print(f"‚úÖ Succ√®s!")
        print(f"‚è±Ô∏è  Temps de r√©ponse: {result['elapsed_time']:.2f}s")
        print(f"üéØ R√©ponse mise en cache: {'‚úÖ OUI' if result['cached'] else '‚ùå NON'}")
        if result["cached"]:
            print(f"‚ö° Temps cache hit: {result['cache_hit_time']}")
        print(f"üìù Longueur r√©ponse: {result['response_length']} caract√®res")
        
        # Afficher un aper√ßu de la r√©ponse
        response_preview = result["response"].get("response", "")[:200]
        print(f"üìÑ Aper√ßu r√©ponse: {response_preview}...")
        
        if result["cached"]:
            print(f"üöÄ CACHE HIT D√âTECT√â - Performance optimale!")
        else:
            print(f"‚è≥ Cache miss - Premi√®re requ√™te ou expiration cache")
            
    else:
        print(f"‚ùå √âchec!")
        print(f"üî¥ Erreur: {result['error']}")
        print(f"‚è±Ô∏è  Temps avant √©chec: {result['elapsed_time']:.2f}s")

def main():
    """Test principal du cache Redis"""
    print(f"üöÄ D√âBUT DU TEST CACHE REDIS INT√âGR√â")
    print(f"üïê Heure: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üéØ URL API: {API_URL}")
    print(f"üè¢ Company ID: {COMPANY_ID}")
    print(f"üë§ User ID: {USER_ID}")
    
    # TEST 1: Premi√®re requ√™te (devrait √™tre sans cache)
    print(f"\nüî• TEST 1: Premi√®re requ√™te (cache miss attendu)")
    result1 = test_request()
    print_test_result("Premi√®re requ√™te", result1)
    
    if not result1["success"]:
        print(f"‚ùå ARR√äT: La premi√®re requ√™te a √©chou√©")
        return
    
    # Attendre un peu pour s'assurer que la sauvegarde cache est termin√©e
    print(f"\n‚è≥ Attente 2 secondes pour finalisation cache...")
    time.sleep(2)
    
    # TEST 2: Requ√™te identique (devrait utiliser le cache)
    print(f"\nüî• TEST 2: Requ√™te identique (cache hit attendu)")
    result2 = test_request()
    print_test_result("Requ√™te identique (cache attendu)", result2)
    
    # TEST 3: Requ√™te l√©g√®rement diff√©rente (devrait √™tre sans cache)
    print(f"\nüî• TEST 3: Requ√™te diff√©rente (cache miss attendu)")
    result3 = test_request(" merci beaucoup")
    print_test_result("Requ√™te diff√©rente", result3)
    
    # ANALYSE COMPARATIVE
    print(f"\n{'='*60}")
    print(f"üìä ANALYSE COMPARATIVE DES PERFORMANCES")
    print(f"{'='*60}")
    
    if result1["success"] and result2["success"]:
        improvement = ((result1["elapsed_time"] - result2["elapsed_time"]) / result1["elapsed_time"]) * 100
        
        print(f"üéØ Requ√™te 1 (sans cache): {result1['elapsed_time']:.2f}s")
        print(f"‚ö° Requ√™te 2 (avec cache): {result2['elapsed_time']:.2f}s")
        
        if result2["cached"]:
            print(f"üöÄ AM√âLIORATION: {improvement:.1f}% plus rapide avec cache!")
            print(f"‚úÖ CACHE REDIS: FONCTIONNEL")
            
            if improvement > 80:
                print(f"üèÜ EXCELLENT: Cache tr√®s efficace (>80% d'am√©lioration)")
            elif improvement > 50:
                print(f"üéâ BON: Cache efficace (>50% d'am√©lioration)")
            else:
                print(f"‚ö†Ô∏è  MOD√âR√â: Cache fonctionne mais am√©lioration <50%")
        else:
            print(f"‚ùå PROBL√àME: Requ√™te identique pas mise en cache!")
            print(f"üîç V√©rifiez la configuration Redis et les logs")
    
    # TEST DE COH√âRENCE
    if result1["success"] and result2["success"]:
        response1 = result1["response"].get("response", "")
        response2 = result2["response"].get("response", "")
        
        print(f"\nüìã TEST DE COH√âRENCE DES R√âPONSES:")
        if response1 == response2:
            print(f"‚úÖ Les r√©ponses sont identiques (cache coh√©rent)")
        else:
            print(f"‚ö†Ô∏è  Les r√©ponses diff√®rent l√©g√®rement (normal pour LLM)")
            print(f"üìè Longueur r√©ponse 1: {len(response1)} caract√®res")
            print(f"üìè Longueur r√©ponse 2: {len(response2)} caract√®res")
    
    print(f"\nüéâ TEST CACHE REDIS TERMIN√â!")

if __name__ == "__main__":
    main()



