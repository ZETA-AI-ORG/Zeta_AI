#!/usr/bin/env python3
"""
TEST INTERACTIF MANUEL
Permet de tester le chatbot en mode conversationnel r√©el
avec logging d√©taill√© de TOUS les contextes
"""
import httpx
import asyncio
import json
import uuid
from datetime import datetime
import os

# Configuration
API_URL = "http://127.0.0.1:8002/chat"
COMPANY_ID = "4OS4yFcf2LZwxhKojbAVbKuVuSdb"
USER_ID = f"test_interactive_{uuid.uuid4().hex[:8]}"

# Historique conversation
conversation_history = []

def print_separator(char="=", length=80):
    print(char * length)

def save_conversation_log():
    """Sauvegarde la conversation compl√®te avec tous les contextes"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    log_path = f"tests/reports/INTERACTIVE_{timestamp}.json"
    os.makedirs(os.path.dirname(log_path), exist_ok=True)
    
    report = {
        "test_type": "interactive_manual",
        "user_id": USER_ID,
        "timestamp": datetime.now().isoformat(),
        "total_turns": len(conversation_history),
        "conversation": conversation_history
    }
    
    with open(log_path, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ Conversation sauvegard√©e: {log_path}")
    return log_path

async def send_message(message: str):
    """Envoie un message et affiche la r√©ponse avec TOUS les contextes"""
    payload = {
        "company_id": COMPANY_ID,
        "user_id": USER_ID,
        "message": message,
        "botlive_enabled": False
    }
    
    print(f"\n{'='*80}")
    print(f"üë§ VOUS: {message}")
    print(f"{'='*80}")
    print("‚è≥ Envoi en cours...")
    
    try:
        async with httpx.AsyncClient(timeout=120.0) as client:
            response = await client.post(API_URL, json=payload)
            result = response.json()
        
        # Extraction donn√©es
        assistant_response = result.get("response", "")
        thinking = result.get("thinking", "")
        debug_contexts = result.get("debug_contexts", {})
        
        # Affichage r√©ponse
        print(f"\nü§ñ ASSISTANT:")
        print(f"{assistant_response}")
        
        # Affichage thinking
        if thinking:
            print(f"\nüß† THINKING ({len(thinking)} chars):")
            print("‚îÄ" * 80)
            print(thinking)
            print("‚îÄ" * 80)
        else:
            print(f"\n‚ö†Ô∏è THINKING: VIDE")
        
        # Affichage contextes syst√®me
        print(f"\nüìä CONTEXTES SYST√àME:")
        print("‚îÄ" * 80)
        
        # 1. State Tracker
        state = debug_contexts.get("state_tracker", {})
        if "error" not in state:
            print(f"‚úÖ STATE TRACKER:")
            print(f"   Compl√©tude: {state.get('completion_rate', 0):.0%}")
            print(f"   Manquants: {state.get('missing_fields', [])}")
            collected = state.get('collected_data', {})
            for key, value in collected.items():
                if value:
                    print(f"   ‚úì {key}: {value}")
        else:
            print(f"‚ùå STATE TRACKER: {state.get('error')}")
        
        # 2. Notepad
        notepad = debug_contexts.get("notepad", {})
        if "error" not in notepad:
            content = notepad.get("content", "")
            if content:
                print(f"\n‚úÖ NOTEPAD ({notepad.get('length', 0)} chars):")
                print(f"   {content[:200]}...")
            else:
                print(f"\n‚ö†Ô∏è NOTEPAD: Vide")
        
        # 3. Thinking Parsed
        thinking_parsed = debug_contexts.get("thinking_parsed", {})
        if "error" not in thinking_parsed:
            phase2 = thinking_parsed.get("phase2_collected", {})
            phase5 = thinking_parsed.get("phase5_decision", {})
            completeness = thinking_parsed.get("completeness", "unknown")
            
            print(f"\n‚úÖ THINKING PARSED:")
            print(f"   Compl√©tude: {completeness}")
            if phase2:
                deja_collecte = phase2.get("deja_collecte", {})
                print(f"   D√©j√† collect√©:")
                for key, value in deja_collecte.items():
                    status = "‚úì" if value else "‚úó"
                    print(f"      {status} {key}: {value}")
        
        # 4. Anti-hallucination
        anti_hallu = debug_contexts.get("anti_hallucination", {})
        if "error" not in anti_hallu:
            print(f"\n‚úÖ ANTI-HALLUCINATION:")
            print(f"   Confiance: {anti_hallu.get('confidence_score', 0):.2f}")
            print(f"   Grounded: {anti_hallu.get('is_grounded', False)}")
        
        # 5. Security
        security = debug_contexts.get("security", {})
        if "error" not in security:
            print(f"\n‚úÖ SECURITY:")
            print(f"   Risk: {security.get('risk_level', 'UNKNOWN')}")
            print(f"   Safe: {security.get('is_safe', False)}")
        
        print("‚îÄ" * 80)
        
        # Sauvegarde dans historique
        turn_data = {
            "turn": len(conversation_history) + 1,
            "user_message": message,
            "assistant_response": assistant_response,
            "thinking": thinking,
            "thinking_length": len(thinking),
            "debug_contexts": debug_contexts,
            "full_result": result
        }
        conversation_history.append(turn_data)
        
        # Analyse rapide
        print(f"\nüìà ANALYSE RAPIDE:")
        if thinking:
            if "paiement: \"paid\"" in thinking and "VALID√â ‚úÖ" not in str(debug_contexts):
                print("   üö® ALERTE: paiement='paid' SANS validation OCR !")
            if "lot 300" in thinking:
                print("   ‚ö†Ô∏è WARNING: type_produit trop vague ('lot 300')")
            if "completude: \"5/5\"" in thinking and "paiement: \"paid\"" not in thinking:
                print("   üö® ALERTE: completude=5/5 SANS paiement valid√© !")
        
        return result
        
    except Exception as e:
        print(f"\n‚ùå ERREUR: {e}")
        return None

async def interactive_test():
    """Boucle interactive"""
    print("="*80)
    print("üß™ TEST INTERACTIF MANUEL")
    print("="*80)
    print(f"User ID: {USER_ID}")
    print(f"API: {API_URL}")
    print("\nCommandes:")
    print("  - Tapez votre message pour converser")
    print("  - 'quit' ou 'exit' pour terminer")
    print("  - 'save' pour sauvegarder sans quitter")
    print("="*80)
    
    while True:
        try:
            # Input utilisateur
            user_input = input("\nüë§ VOUS: ").strip()
            
            if not user_input:
                continue
            
            if user_input.lower() in ['quit', 'exit', 'q']:
                print("\nüõë Fin du test...")
                break
            
            if user_input.lower() == 'save':
                save_conversation_log()
                continue
            
            # Envoi message
            await send_message(user_input)
            
        except KeyboardInterrupt:
            print("\n\nüõë Interruption clavier...")
            break
        except Exception as e:
            print(f"\n‚ùå Erreur: {e}")
    
    # Sauvegarde finale
    if conversation_history:
        log_path = save_conversation_log()
        print(f"\n‚úÖ {len(conversation_history)} tours sauvegard√©s")
        print(f"üìÑ Rapport: {log_path}")
    
    print("\n‚úÖ Test termin√©!")

if __name__ == "__main__":
    asyncio.run(interactive_test())
