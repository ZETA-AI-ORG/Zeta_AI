#!/usr/bin/env python3
"""
üéØ ENRICHISSEUR DE PROMPTS INTELLIGENT
Enrichit les prompts LLM avec intentions, entit√©s, contexte structur√© et reasoning explicite
Optimis√© pour la compr√©hension fran√ßaise et le e-commerce
"""

import logging
import json
from typing import List, Dict, Any, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)

class PromptTemplate(Enum):
    """Templates de prompts sp√©cialis√©s"""
    PRODUCT_INQUIRY = "product_inquiry"
    PRICE_INQUIRY = "price_inquiry"
    ORDER_INTENT = "order_intent"
    DELIVERY_INQUIRY = "delivery_inquiry"
    PAYMENT_INQUIRY = "payment_inquiry"
    SIZE_INQUIRY = "size_inquiry"
    AVAILABILITY_INQUIRY = "availability_inquiry"
    SUPPORT_GENERAL = "support_general"
    MULTI_INTENT = "multi_intent"

@dataclass
class EnrichedPrompt:
    """Prompt enrichi avec m√©tadonn√©es"""
    system_prompt: str
    user_prompt: str
    context_structured: str
    reasoning_chain: List[str]
    confidence: float
    template_used: str
    enrichment_metadata: Dict[str, Any]

class PromptEnricher:
    """
    üéØ ENRICHISSEUR DE PROMPTS INTELLIGENT
    
    Fonctionnalit√©s :
    - Templates sp√©cialis√©s par type d'intention
    - Injection intelligente d'entit√©s extraites
    - Reasoning explicite pour le LLM
    - Contexte structur√© et hi√©rarchis√©
    - Adaptation dynamique selon la complexit√©
    """
    
    def __init__(self):
        self.templates = self._init_templates()
        self.reasoning_patterns = self._init_reasoning_patterns()
        
        # Entit√©s critiques pour e-commerce
        self.critical_entities = {
            'PRODUCT_TYPE': ['couches', 'culottes', 'pression', 'adultes', 'b√©b√©'],
            'QUANTITY': ['paquet', 'lot', 'pi√®ce', 'unit√©', 'colis'],
            'SIZE': ['taille', 'pointure', 'dimension'],
            'LOCATION': ['cocody', 'yopougon', 'abidjan', 'plateau', 'adjam√©'],
            'PRICE': ['fcfa', 'prix', 'co√ªt', 'tarif'],
            'PHONE': ['+225', 't√©l√©phone', 'num√©ro'],
            'PAYMENT': ['wave', 'mobile money', 'paiement', 'acompte']
        }
    
    def _init_templates(self) -> Dict[str, Dict[str, str]]:
        """Initialise les templates de prompts sp√©cialis√©s"""
        return {
            PromptTemplate.PRODUCT_INQUIRY.value: {
                "system": """Tu es {ai_name}, assistant IA sp√©cialis√© de {company_name} dans le secteur {business_sector}.

üéØ INTENTION D√âTECT√âE: Demande d'information produit
üìä ENTIT√âS EXTRAITES: {entities_formatted}
üîç CONTEXTE STRUCTUR√â DISPONIBLE

INSTRUCTIONS SP√âCIFIQUES:
1. Pr√©sente les produits disponibles de mani√®re claire et organis√©e
2. Utilise les entit√©s extraites pour personnaliser la r√©ponse
3. Inclus les informations de stock si disponibles
4. Propose des alternatives si le produit exact n'est pas trouv√©
5. Termine par une question d'engagement pour continuer la conversation

STYLE: Professionnel, informatif, orient√© vente""",
                
                "user": """REQU√äTE CLIENT: "{original_query}"

ANALYSE AUTOMATIQUE:
- Type de question: {question_type}
- Intentions d√©tect√©es: {intentions_list}
- Entit√©s cl√©s: {key_entities}
- Confiance NLP: {nlp_confidence}%

CONTEXTE PRODUITS:
{structured_context}

RAISONNEMENT REQUIS:
{reasoning_chain}

R√©ponds de mani√®re pr√©cise en exploitant toutes les informations contextuelles."""
            },
            
            PromptTemplate.PRICE_INQUIRY.value: {
                "system": """Tu es {ai_name}, assistant IA de {company_name} sp√©cialis√© dans les tarifs et devis.

üéØ INTENTION D√âTECT√âE: Demande de prix/tarification
üí∞ ENTIT√âS PRIX EXTRAITES: {price_entities}
üìä CALCULS AUTOMATIQUES REQUIS

INSTRUCTIONS SP√âCIFIQUES:
1. Fournis les prix exacts selon les quantit√©s demand√©es
2. Calcule automatiquement les totaux et √©conomies
3. Inclus les frais de livraison selon la zone
4. Propose des offres group√©es avantageuses
5. Mentionne les modalit√©s de paiement (Wave, acompte)
6. Termine par un r√©capitulatif clair du devis

STYLE: Pr√©cis, transparent, commercial""",
                
                "user": """DEMANDE DE PRIX: "{original_query}"

ANALYSE TARIFAIRE:
- Produits identifi√©s: {product_entities}
- Quantit√©s: {quantity_entities}
- Zone livraison: {location_entities}
- Type de calcul: {calculation_type}

CONTEXTE PRIX:
{structured_context}

CALCULS √Ä EFFECTUER:
{reasoning_chain}

Fournis un devis d√©taill√© et pr√©cis."""
            },
            
            PromptTemplate.DELIVERY_INQUIRY.value: {
                "system": """Tu es {ai_name}, assistant IA de {company_name} expert en logistique et livraison.

üéØ INTENTION D√âTECT√âE: Question sur la livraison
üöö ZONES ET TARIFS DE LIVRAISON DISPONIBLES
‚è∞ D√âLAIS ET CONDITIONS SP√âCIFIQUES

INSTRUCTIONS SP√âCIFIQUES:
1. Identifie pr√©cis√©ment la zone de livraison demand√©e
2. Fournis les tarifs exacts selon la zone
3. Explique les d√©lais (avant/apr√®s 11h)
4. Mentionne les conditions sp√©ciales si applicable
5. Propose des alternatives si la zone est √©loign√©e

STYLE: Informatif, rassurant, logistique""",
                
                "user": """QUESTION LIVRAISON: "{original_query}"

ANALYSE G√âOGRAPHIQUE:
- Zones mentionn√©es: {location_entities}
- Type de livraison: {delivery_type}
- Urgence d√©tect√©e: {urgency_level}

CONTEXTE LIVRAISON:
{structured_context}

RAISONNEMENT LOGISTIQUE:
{reasoning_chain}

R√©ponds avec les informations de livraison pr√©cises."""
            },
            
            PromptTemplate.MULTI_INTENT.value: {
                "system": """Tu es {ai_name}, assistant IA polyvalent de {company_name}.

üéØ INTENTIONS MULTIPLES D√âTECT√âES: {intentions_count} intentions
üîÄ TRAITEMENT S√âQUENTIEL REQUIS
üìä ENTIT√âS COMPLEXES EXTRAITES

INSTRUCTIONS SP√âCIFIQUES:
1. Traite chaque intention dans l'ordre de priorit√©
2. Structure ta r√©ponse en sections claires
3. Utilise les entit√©s pour personnaliser chaque section
4. Assure la coh√©rence entre les diff√©rentes parties
5. Termine par une synth√®se et prochaines √©tapes

STYLE: Structur√©, complet, professionnel""",
                
                "user": """REQU√äTE COMPLEXE: "{original_query}"

ANALYSE MULTI-INTENTIONS:
- Intentions d√©tect√©es: {intentions_detailed}
- Entit√©s partag√©es: {shared_entities}
- Priorit√© de traitement: {processing_order}

CONTEXTE GLOBAL:
{structured_context}

PLAN DE R√âPONSE:
{reasoning_chain}

Traite toutes les intentions de mani√®re structur√©e et coh√©rente."""
            }
        }
    
    def _init_reasoning_patterns(self) -> Dict[str, List[str]]:
        """Initialise les patterns de raisonnement"""
        return {
            'product_inquiry': [
                "1. Identifier les produits mentionn√©s dans la requ√™te",
                "2. V√©rifier la disponibilit√© en stock",
                "3. Pr√©senter les caract√©ristiques principales",
                "4. Proposer des alternatives si n√©cessaire",
                "5. Engager pour la suite (prix, commande)"
            ],
            'price_inquiry': [
                "1. Extraire les quantit√©s et produits demand√©s",
                "2. Calculer les prix unitaires et totaux",
                "3. Ajouter les frais de livraison selon la zone",
                "4. Calculer les √©conomies sur les lots",
                "5. Pr√©senter un devis clair et d√©taill√©"
            ],
            'delivery_inquiry': [
                "1. Identifier la zone de livraison exacte",
                "2. D√©terminer les tarifs selon la zone",
                "3. Calculer les d√©lais selon l'heure de commande",
                "4. Expliquer les conditions de livraison",
                "5. Proposer des options si n√©cessaire"
            ],
            'multi_intent': [
                "1. Prioriser les intentions par importance",
                "2. Traiter chaque intention s√©quentiellement",
                "3. Maintenir la coh√©rence entre les r√©ponses",
                "4. Synth√©tiser les informations communes",
                "5. Proposer une action globale"
            ]
        }
    
    def detect_prompt_template(self, intentions: List[Dict[str, Any]], entities: List[Dict[str, Any]]) -> str:
        """D√©tecte le template de prompt optimal"""
        if not intentions:
            return PromptTemplate.SUPPORT_GENERAL.value
        
        # Multi-intentions
        if len(intentions) > 1:
            return PromptTemplate.MULTI_INTENT.value
        
        # Intention principale
        main_intent = intentions[0]['intent']
        
        # Mapping direct
        template_mapping = {
            'product_inquiry': PromptTemplate.PRODUCT_INQUIRY.value,
            'price_inquiry': PromptTemplate.PRICE_INQUIRY.value,
            'order_intent': PromptTemplate.ORDER_INTENT.value,
            'delivery_inquiry': PromptTemplate.DELIVERY_INQUIRY.value,
            'payment_inquiry': PromptTemplate.PAYMENT_INQUIRY.value,
            'size_inquiry': PromptTemplate.SIZE_INQUIRY.value,
            'availability_inquiry': PromptTemplate.AVAILABILITY_INQUIRY.value
        }
        
        return template_mapping.get(main_intent, PromptTemplate.SUPPORT_GENERAL.value)
    
    def format_entities_for_prompt(self, entities: List[Dict[str, Any]]) -> Dict[str, str]:
        """Formate les entit√©s pour injection dans les prompts"""
        formatted = {
            'entities_formatted': '',
            'price_entities': '',
            'product_entities': '',
            'quantity_entities': '',
            'location_entities': '',
            'key_entities': ''
        }
        
        if not entities:
            return formatted
        
        # Groupement par type
        entities_by_type = {}
        for entity in entities:
            entity_type = entity.get('type', 'UNKNOWN')
            if entity_type not in entities_by_type:
                entities_by_type[entity_type] = []
            entities_by_type[entity_type].append(entity.get('entity', ''))
        
        # Formatage g√©n√©ral
        formatted_parts = []
        for entity_type, values in entities_by_type.items():
            unique_values = list(set(values))
            formatted_parts.append(f"{entity_type}: {', '.join(unique_values)}")
        
        formatted['entities_formatted'] = ' | '.join(formatted_parts)
        
        # Formatage sp√©cialis√©
        formatted['price_entities'] = ', '.join(entities_by_type.get('PRICE', []))
        formatted['product_entities'] = ', '.join(entities_by_type.get('PRODUCT_TYPE', []))
        formatted['quantity_entities'] = ', '.join(entities_by_type.get('QUANTITY', []))
        formatted['location_entities'] = ', '.join(entities_by_type.get('LOCATION', []))
        
        # Entit√©s cl√©s (les plus importantes)
        key_entities = []
        for entity_type in ['PRODUCT_TYPE', 'QUANTITY', 'PRICE', 'LOCATION']:
            if entity_type in entities_by_type:
                key_entities.extend(entities_by_type[entity_type][:2])  # Max 2 par type
        
        formatted['key_entities'] = ', '.join(key_entities[:5])  # Max 5 entit√©s cl√©s
        
        return formatted
    
    def format_intentions_for_prompt(self, intentions: List[Dict[str, Any]]) -> Dict[str, str]:
        """Formate les intentions pour injection dans les prompts"""
        formatted = {
            'intentions_list': '',
            'intentions_detailed': '',
            'intentions_count': '0',
            'processing_order': ''
        }
        
        if not intentions:
            return formatted
        
        # Liste simple
        intent_names = [intent.get('intent', 'unknown') for intent in intentions]
        formatted['intentions_list'] = ', '.join(intent_names)
        formatted['intentions_count'] = str(len(intentions))
        
        # D√©tails avec confiance
        detailed_parts = []
        for intent in intentions:
            name = intent.get('intent', 'unknown')
            confidence = intent.get('confidence', 0)
            detailed_parts.append(f"{name} ({confidence:.1%})")
        
        formatted['intentions_detailed'] = ' | '.join(detailed_parts)
        
        # Ordre de traitement (par confiance d√©croissante)
        sorted_intents = sorted(intentions, key=lambda x: x.get('confidence', 0), reverse=True)
        processing_order = [intent.get('intent', 'unknown') for intent in sorted_intents]
        formatted['processing_order'] = ' ‚Üí '.join(processing_order)
        
        return formatted
    
    def build_reasoning_chain(self, template: str, intentions: List[Dict[str, Any]], entities: List[Dict[str, Any]]) -> List[str]:
        """Construit la cha√Æne de raisonnement"""
        base_reasoning = self.reasoning_patterns.get(template, [
            "1. Analyser la requ√™te client",
            "2. Identifier les informations pertinentes",
            "3. Structurer la r√©ponse",
            "4. V√©rifier la coh√©rence",
            "5. Proposer une action"
        ])
        
        # Adaptation selon les entit√©s
        enhanced_reasoning = base_reasoning.copy()
        
        # Ajouts sp√©cifiques selon les entit√©s pr√©sentes
        entity_types = [e.get('type') for e in entities]
        
        if 'PRICE' in entity_types and 'QUANTITY' in entity_types:
            enhanced_reasoning.append("6. Calculer les totaux et √©conomies potentielles")
        
        if 'LOCATION' in entity_types:
            enhanced_reasoning.append("7. Adapter selon la zone g√©ographique")
        
        if len(intentions) > 1:
            enhanced_reasoning.insert(1, "1.5. Prioriser les intentions multiples")
        
        return enhanced_reasoning
    
    def structure_context_hierarchical(self, context: str, intentions: List[Dict[str, Any]], entities: List[Dict[str, Any]]) -> str:
        """Structure le contexte de mani√®re hi√©rarchique"""
        if not context:
            return "Aucun contexte sp√©cifique disponible."
        
        # D√©tection des sections dans le contexte
        sections = []
        current_section = ""
        
        for line in context.split('\n'):
            line = line.strip()
            if not line:
                continue
            
            # D√©tection d'en-t√™tes (lignes avec ===, ---, etc.)
            if any(marker in line for marker in ['===', '---', '###', '***']):
                if current_section:
                    sections.append(current_section)
                current_section = f"\n{line}\n"
            else:
                current_section += f"{line}\n"
        
        if current_section:
            sections.append(current_section)
        
        # Si pas de structure d√©tect√©e, cr√©er une structure basique
        if len(sections) <= 1:
            return f"üìÑ CONTEXTE DISPONIBLE:\n{context}"
        
        # Priorisation des sections selon les intentions
        prioritized_sections = []
        for section in sections:
            priority = self._calculate_section_priority(section, intentions, entities)
            prioritized_sections.append((priority, section))
        
        # Tri par priorit√© d√©croissante
        prioritized_sections.sort(key=lambda x: x[0], reverse=True)
        
        # Reconstruction hi√©rarchique
        structured = "üìä CONTEXTE STRUCTUR√â PAR PERTINENCE:\n\n"
        for i, (priority, section) in enumerate(prioritized_sections[:5], 1):  # Max 5 sections
            structured += f"üîπ SECTION {i} (Pertinence: {priority:.1f}):\n{section}\n"
        
        return structured
    
    def _calculate_section_priority(self, section: str, intentions: List[Dict[str, Any]], entities: List[Dict[str, Any]]) -> float:
        """Calcule la priorit√© d'une section selon les intentions/entit√©s"""
        priority = 0.0
        section_lower = section.lower()
        
        # Bonus selon les intentions
        for intent in intentions:
            intent_name = intent.get('intent', '')
            confidence = intent.get('confidence', 0)
            
            if intent_name == 'product_inquiry' and any(word in section_lower for word in ['produit', 'article', 'stock']):
                priority += confidence * 2.0
            elif intent_name == 'price_inquiry' and any(word in section_lower for word in ['prix', 'fcfa', 'tarif']):
                priority += confidence * 2.0
            elif intent_name == 'delivery_inquiry' and any(word in section_lower for word in ['livraison', 'zone', 'd√©lai']):
                priority += confidence * 2.0
        
        # Bonus selon les entit√©s
        for entity in entities:
            entity_text = entity.get('entity', '').lower()
            if entity_text and entity_text in section_lower:
                priority += entity.get('confidence', 0.5)
        
        # Bonus pour longueur appropri√©e
        section_length = len(section)
        if 100 <= section_length <= 800:  # Longueur optimale
            priority += 0.5
        
        return priority
    
    def enrich_prompt(
        self, 
        original_query: str,
        base_context: str,
        intentions: List[Dict[str, Any]],
        entities: List[Dict[str, Any]],
        company_info: Dict[str, Any]
    ) -> EnrichedPrompt:
        """
        üéØ ENRICHISSEMENT PRINCIPAL DU PROMPT
        
        Combine toutes les techniques d'enrichissement
        """
        logger.info(f"üéØ [PROMPT_ENRICH] D√©but enrichissement: '{original_query[:50]}...'")
        
        # 1. D√©tection du template optimal
        template = self.detect_prompt_template(intentions, entities)
        
        # 2. Formatage des entit√©s et intentions
        entities_formatted = self.format_entities_for_prompt(entities)
        intentions_formatted = self.format_intentions_for_prompt(intentions)
        
        # 3. Construction de la cha√Æne de raisonnement
        reasoning_chain = self.build_reasoning_chain(template, intentions, entities)
        
        # 4. Structure hi√©rarchique du contexte
        structured_context = self.structure_context_hierarchical(base_context, intentions, entities)
        
        # 5. Variables pour injection
        template_vars = {
            'ai_name': company_info.get('ai_name', 'Assistant IA'),
            'company_name': company_info.get('company_name', 'Notre entreprise'),
            'business_sector': company_info.get('business_sector', 'Commerce'),
            'original_query': original_query,
            'structured_context': structured_context,
            'reasoning_chain': '\n'.join(f"   {step}" for step in reasoning_chain),
            'question_type': template.replace('_', ' ').title(),
            'nlp_confidence': int(sum(i.get('confidence', 0) for i in intentions) / len(intentions) * 100) if intentions else 50,
            **entities_formatted,
            **intentions_formatted
        }
        
        # 6. G√©n√©ration des prompts
        template_data = self.templates.get(template, self.templates[PromptTemplate.SUPPORT_GENERAL.value])
        
        system_prompt = template_data.get('system', '').format(**template_vars)
        user_prompt = template_data.get('user', '').format(**template_vars)
        
        # 7. Calcul de confiance
        confidence = self._calculate_enrichment_confidence(intentions, entities, len(structured_context))
        
        # 8. M√©tadonn√©es d'enrichissement
        enrichment_metadata = {
            'template_used': template,
            'entities_count': len(entities),
            'intentions_count': len(intentions),
            'context_length': len(structured_context),
            'reasoning_steps': len(reasoning_chain),
            'variables_injected': len(template_vars)
        }
        
        logger.info(f"üéØ [PROMPT_ENRICH] Termin√©: template={template}, confiance={confidence:.2f}")
        
        return EnrichedPrompt(
            system_prompt=system_prompt,
            user_prompt=user_prompt,
            context_structured=structured_context,
            reasoning_chain=reasoning_chain,
            confidence=confidence,
            template_used=template,
            enrichment_metadata=enrichment_metadata
        )
    
    def _calculate_enrichment_confidence(self, intentions: List[Dict[str, Any]], entities: List[Dict[str, Any]], context_length: int) -> float:
        """Calcule la confiance de l'enrichissement"""
        confidence = 0.5  # Base
        
        # Bonus intentions
        if intentions:
            avg_intent_confidence = sum(i.get('confidence', 0) for i in intentions) / len(intentions)
            confidence += avg_intent_confidence * 0.3
        
        # Bonus entit√©s
        if entities:
            avg_entity_confidence = sum(e.get('confidence', 0) for e in entities) / len(entities)
            confidence += avg_entity_confidence * 0.2
        
        # Bonus contexte
        if context_length > 500:
            confidence += 0.1
        if context_length > 1500:
            confidence += 0.1
        
        return min(confidence, 1.0)

# Instance globale
prompt_enricher = PromptEnricher()

# Interface simple
def enrich_llm_prompt(
    query: str,
    context: str,
    intentions: List[Dict[str, Any]],
    entities: List[Dict[str, Any]],
    company_info: Dict[str, Any]
) -> EnrichedPrompt:
    """Interface simple pour enrichissement de prompt"""
    return prompt_enricher.enrich_prompt(query, context, intentions, entities, company_info)

if __name__ == "__main__":
    # Test d'enrichissement
    test_query = "Je veux commander 3 paquets de couches taille 2 et combien pour livraison √† Cocody?"
    test_context = "=== PRODUITS ===\nCouches taille 2: 18.900 FCFA\n=== LIVRAISON ===\nCocody: 1500 FCFA"
    test_intentions = [
        {"intent": "order_intent", "confidence": 0.8},
        {"intent": "price_inquiry", "confidence": 0.7},
        {"intent": "delivery_inquiry", "confidence": 0.6}
    ]
    test_entities = [
        {"entity": "3 paquets", "type": "QUANTITY", "confidence": 0.9},
        {"entity": "taille 2", "type": "SIZE", "confidence": 0.8},
        {"entity": "Cocody", "type": "LOCATION", "confidence": 0.9}
    ]
    test_company = {
        "ai_name": "Jessica",
        "company_name": "Rue du Gros",
        "business_sector": "B√©b√© & Pu√©riculture"
    }
    
    enriched = enrich_llm_prompt(test_query, test_context, test_intentions, test_entities, test_company)
    
    print(f"\n{'='*60}")
    print(f"TEST ENRICHISSEMENT PROMPT")
    print('='*60)
    print(f"Template: {enriched.template_used}")
    print(f"Confiance: {enriched.confidence:.2f}")
    print(f"Reasoning: {len(enriched.reasoning_chain)} √©tapes")
    print(f"\nSYSTEM PROMPT:\n{enriched.system_prompt[:200]}...")
    print(f"\nUSER PROMPT:\n{enriched.user_prompt[:200]}...")
