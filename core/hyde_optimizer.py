"""
‚ö° HYDE OPTIMIZER - Skip HYDE pour questions simples
√âconomie ~2s sur 60% des requ√™tes
"""

import re
from typing import Optional
import logging

logger = logging.getLogger(__name__)

# Patterns de questions simples (pas besoin de HYDE)
SIMPLE_QUERY_PATTERNS = [
    # Prix
    r'prix\s+(?:du\s+)?(?:lot\s+)?(?:de\s+)?\d+',
    r'combien\s+(?:coute|cout|co√ªte|co√ªt)',
    r'√ßa\s+(?:coute|cout|co√ªte|co√ªt)',
    r'\d+\s+(?:fcfa|cfa|francs?)',
    
    # Livraison
    r'livraison\s+(?:√†|a|pour|vers)?\s*\w+',
    r'livre(?:r|z)?\s+(?:√†|a)\s+\w+',
    r'frais\s+(?:de\s+)?livraison',
    r'd√©lai\s+(?:de\s+)?livraison',
    
    # Contact
    r'contact(?:er)?',
    r'telephone|tel|phone|appel(?:er)?',
    r'whatsapp',
    r'numero|num√©ro',
    
    # Paiement
    r'paiement',
    r'payer|pay√©',
    r'wave|orange\s+money|mtn\s+money|moov\s+money',
    r'esp√®ces|espece|cash',
    
    # Horaires
    r'horaire|heure',
    r'ouvert|ferm√©|ferme',
    r'quand\s+(?:ouvr|ferm)',
    
    # Localisation
    r'adresse',
    r'localisation',
    r'o√π\s+(?:√™tes|etes)',
    r'situ√©|situ√©e',
    
    # Produits simples
    r'(?:couches?|culottes?)\s+(?:taille|t)\s*\d+',
    r'lot\s+(?:de\s+)?\d+',
    r'disponible',
    r'en\s+stock'
]

# Patterns de questions complexes (besoin de HYDE)
COMPLEX_QUERY_PATTERNS = [
    r'(?:comment|pourquoi|quelle?\s+(?:est|sont))',
    r'diff√©rence\s+entre',
    r'meilleur|mieux|pr√©f√©rable',
    r'conseil|recommand',
    r'expliqu|d√©tail',
    r'compar(?:er|aison)',
    r'avantage|inconv√©nient'
]


def is_simple_query(query: str) -> bool:
    """
    D√©tecte si une question est simple (pas besoin de HYDE)
    
    Args:
        query: Question utilisateur
        
    Returns:
        True si simple, False si complexe
    """
    query_lower = query.lower()
    
    # V√©rifier patterns complexes d'abord
    for pattern in COMPLEX_QUERY_PATTERNS:
        if re.search(pattern, query_lower):
            logger.info(f"üîç [HYDE] Question COMPLEXE d√©tect√©e: {pattern}")
            return False
    
    # V√©rifier patterns simples
    for pattern in SIMPLE_QUERY_PATTERNS:
        if re.search(pattern, query_lower):
            logger.info(f"‚ö° [HYDE] Question SIMPLE d√©tect√©e: {pattern}")
            return True
    
    # Par d√©faut, consid√©rer comme complexe (s√©curit√©)
    logger.info(f"‚ùì [HYDE] Question INCONNUE, utiliser HYDE par s√©curit√©")
    return False


def should_skip_hyde(query: str, force_hyde: bool = False) -> bool:
    """
    D√©termine si HYDE doit √™tre skipp√©
    
    Args:
        query: Question utilisateur
        force_hyde: Forcer HYDE m√™me pour questions simples
        
    Returns:
        True si skip HYDE, False sinon
    """
    if force_hyde:
        logger.info("üîß [HYDE] Forc√© par param√®tre")
        return False
    
    if is_simple_query(query):
        logger.info("‚ö° [HYDE] SKIP - Question simple d√©tect√©e")
        return True
    
    logger.info("üîç [HYDE] ACTIF - Question complexe")
    return False


def get_hyde_stats() -> dict:
    """
    Retourne les statistiques d'utilisation de HYDE
    (√Ä impl√©menter avec un compteur global)
    """
    return {
        "total_queries": 0,
        "hyde_skipped": 0,
        "hyde_used": 0,
        "skip_rate": 0.0
    }


# ========== EXEMPLES ==========

if __name__ == "__main__":
    # Tests
    test_queries = [
        # Simples (skip HYDE)
        "Prix du lot de 300 couches",
        "Combien co√ªte la livraison √† Angr√©",
        "Votre num√©ro WhatsApp",
        "Vous acceptez Wave?",
        "Horaires d'ouverture",
        "O√π √™tes-vous situ√©s",
        "Couches taille 3 disponibles",
        
        # Complexes (utiliser HYDE)
        "Quelle est la diff√©rence entre couches et couches culottes",
        "Pourquoi les prix varient selon les tailles",
        "Comment choisir la bonne taille",
        "Quel est le meilleur produit pour un b√©b√© de 6 mois",
        "Expliquez-moi les modes de paiement",
        "Comparer les d√©lais de livraison"
    ]
    
    print("=" * 60)
    print("TEST HYDE OPTIMIZER")
    print("=" * 60)
    
    simple_count = 0
    complex_count = 0
    
    for query in test_queries:
        skip = should_skip_hyde(query)
        status = "‚ö° SKIP" if skip else "üîç USE"
        print(f"{status} | {query}")
        
        if skip:
            simple_count += 1
        else:
            complex_count += 1
    
    print("=" * 60)
    print(f"R√©sultats: {simple_count} simples, {complex_count} complexes")
    print(f"Taux de skip: {simple_count/len(test_queries)*100:.1f}%")
    print(f"√âconomie estim√©e: {simple_count * 2:.1f}s (2s par skip)")
