"""
Gestionnaire d'Ã©tat conversationnel pour le mode Botlive.
Stocke les images et dÃ©tections par utilisateur pendant le processus de commande.
"""
import json
import os
from datetime import datetime
from typing import Optional, Dict


class LiveConversationState:
    """GÃ¨re l'Ã©tat de la conversation Live par utilisateur"""
    
    def __init__(self, storage_path: str = "./data/live_sessions.json"):
        self.storage_path = storage_path
        self.sessions: Dict[str, dict] = {}
        self._ensure_dir()
        self._load()
    
    def _ensure_dir(self):
        """CrÃ©e le dossier data/ si nÃ©cessaire"""
        os.makedirs(os.path.dirname(self.storage_path), exist_ok=True)
    
    def _load(self):
        """Charge les sessions depuis le disque"""
        if os.path.exists(self.storage_path):
            try:
                with open(self.storage_path, 'r') as f:
                    self.sessions = json.load(f)
            except Exception:
                self.sessions = {}
        else:
            self.sessions = {}
    
    def _save(self):
        """Sauvegarde les sessions sur disque"""
        try:
            with open(self.storage_path, 'w') as f:
                json.dump(self.sessions, f, indent=2)
        except Exception as e:
            print(f"[LiveState] Erreur sauvegarde: {e}")
    
    def add_detection(self, user_id: str, company_id: str, image_url: str, 
                     detection_result: dict, detection_type: str) -> str:
        """
        Ajoute une dÃ©tection d'image pour un utilisateur.
        
        Args:
            user_id: ID utilisateur Messenger
            company_id: ID entreprise
            image_url: URL de l'image
            detection_result: rÃ©sultat YOLO ou OCR
            detection_type: 'product' ou 'payment'
        
        Returns:
            'ready' si les 2 images sont complÃ¨tes, 'collecting' sinon
        """
        if user_id not in self.sessions:
            self.sessions[user_id] = {
                "company_id": company_id,
                "product_img": None,
                "product_detection": None,
                "payment_img": None,
                "payment_detection": None,
                "delivery_zone": None,
                "status": "collecting",
                "created_at": datetime.utcnow().isoformat()
            }
        
        session = self.sessions[user_id]
        
        if detection_type == "product":
            session["product_img"] = image_url
            session["product_detection"] = detection_result
        elif detection_type == "payment":
            session["payment_img"] = image_url
            session["payment_detection"] = detection_result
        
        # VÃ©rifier si complet
        if session["product_img"] and session["payment_img"]:
            session["status"] = "ready"
            self._save()
            return "ready"
        
        self._save()
        return "collecting"
    
    def get_missing(self, user_id: str) -> Optional[str]:
        """
        Retourne ce qui manque pour finaliser la commande.
        
        Returns:
            'product': image produit manquante
            'payment': image paiement manquante
            'both': les 2 manquent
            None: commande complÃ¨te
        """
        if user_id not in self.sessions:
            return "both"
        
        session = self.sessions[user_id]
        has_product = session.get("product_img") is not None
        has_payment = session.get("payment_img") is not None
        
        if not has_product and not has_payment:
            return "both"
        elif not has_product:
            return "product"
        elif not has_payment:
            return "payment"
        else:
            return None
    
    def get_session(self, user_id: str) -> Optional[dict]:
        """RÃ©cupÃ¨re la session complÃ¨te d'un utilisateur"""
        return self.sessions.get(user_id)
    
    def get_context_for_llm(self, user_id: str) -> str:
        """
        GÃ©nÃ¨re un contexte textuel pour le LLM avec les dÃ©tections actuelles.
        
        Returns:
            Texte formatÃ© dÃ©crivant l'Ã©tat actuel de la commande
        """
        if user_id not in self.sessions:
            return "[Aucune image reÃ§ue pour le moment]"
        
        session = self.sessions[user_id]
        parts = []
        
        if session.get("product_detection"):
            det = session["product_detection"]
            parts.append(f"ðŸ“¦ IMAGE PRODUIT DÃ‰TECTÃ‰E: {det.get('name', 'inconnu')} (confiance: {det.get('confidence', 0)*100:.1f}%)")
        else:
            parts.append("ðŸ“¦ IMAGE PRODUIT: non reÃ§ue")
        
        if session.get("payment_detection"):
            det = session["payment_detection"]
            amount = det.get("amount", "")
            currency = det.get("currency", "")
            ref = det.get("reference", "")
            if amount and currency:
                parts.append(f"ðŸ’³ PAIEMENT DÃ‰TECTÃ‰: {amount} {currency}" + (f" | RÃ©f: {ref}" if ref else ""))
            else:
                parts.append("ðŸ’³ IMAGE PAIEMENT: reÃ§ue mais montant non lisible")
        else:
            parts.append("ðŸ’³ IMAGE PAIEMENT: non reÃ§ue")

        # Zone de livraison si connue
        zone = session.get("delivery_zone")
        if zone:
            parts.append(f"ðŸšš ZONE LIVRAISON: {zone}")
        
        return "\n".join(parts)
    
    def clear(self, user_id: str):
        """Supprime la session d'un utilisateur aprÃ¨s validation"""
        if user_id in self.sessions:
            del self.sessions[user_id]
            self._save()
    
    def reset(self, user_id: str):
        """Alias pour clear (compatibilitÃ©)"""
        self.clear(user_id)

    # --- MÃ©tadonnÃ©es supplÃ©mentaires ---
    def set_delivery_zone(self, user_id: str, zone: str):
        if not user_id:
            return
        if user_id not in self.sessions:
            self.sessions[user_id] = {"company_id": "", "product_img": None, "product_detection": None,
                                     "payment_img": None, "payment_detection": None, "delivery_zone": None,
                                     "status": "collecting", "created_at": datetime.utcnow().isoformat()}
        self.sessions[user_id]["delivery_zone"] = zone
        self._save()


# Singleton global
_live_state_instance = None

def get_live_conversation_state() -> LiveConversationState:
    """Retourne l'instance singleton du gestionnaire d'Ã©tat Live"""
    global _live_state_instance
    if _live_state_instance is None:
        _live_state_instance = LiveConversationState()
    return _live_state_instance
