#!/usr/bin/env python3
"""
Health Check intelligent pour Groq
Test rapide avant chaque requ√™te pour √©viter les 503
"""

import asyncio
import time
from datetime import datetime, timedelta
from typing import Optional, Tuple, Dict

class GroqHealthChecker:
    def __init__(self):
        self.last_check_time = None
        self.last_check_result = None
        self.check_cache_duration = 30  # Cache le r√©sultat 30 secondes
        self.consecutive_failures = 0
        
    async def is_groq_healthy(self) -> bool:
        """
        V√©rifie si Groq est disponible avec un test rapide
        Cache le r√©sultat pour √©viter trop de tests
        """
        now = datetime.now()
        
        # Utiliser le cache si r√©cent
        if (self.last_check_time and 
            (now - self.last_check_time).total_seconds() < self.check_cache_duration):
            return self.last_check_result
        
        # Effectuer le health check
        try:
            print(f"üîç [HEALTH] Test Groq...")
            start_time = time.time()
            
            from core.llm_client_groq import complete as groq_complete
            
            # Test ultra-rapide : 1 token max
            response, token_info = await asyncio.wait_for(
                groq_complete(
                    "Hi", 
                    model_name="llama-3.3-70b-versatile",
                    max_tokens=1,
                    temperature=0.1
                ),
                timeout=5.0  # Timeout 5 secondes
            )
            
            duration = time.time() - start_time
            
            # Succ√®s
            self.last_check_time = now
            self.last_check_result = True
            self.consecutive_failures = 0
            
            print(f"‚úÖ [HEALTH] Groq OK ({duration:.1f}s)")
            return True
            
        except asyncio.TimeoutError:
            print(f"‚è∞ [HEALTH] Groq timeout (>5s)")
            self._mark_failure()
            return False
            
        except Exception as e:
            error_msg = str(e).lower()
            
            if "503" in error_msg or "over capacity" in error_msg:
                print(f"üö´ [HEALTH] Groq 503 (surcharge)")
            elif "429" in error_msg:
                print(f"üö´ [HEALTH] Groq 429 (rate limit)")
            else:
                print(f"‚ùå [HEALTH] Groq erreur: {e}")
            
            self._mark_failure()
            return False
    
    def _mark_failure(self):
        """Marque un √©chec et ajuste le cache"""
        self.last_check_time = datetime.now()
        self.last_check_result = False
        self.consecutive_failures += 1
        
        # Augmenter le cache apr√®s √©checs r√©p√©t√©s
        if self.consecutive_failures >= 3:
            self.check_cache_duration = 120  # 2 minutes apr√®s 3 √©checs
        elif self.consecutive_failures >= 2:
            self.check_cache_duration = 60   # 1 minute apr√®s 2 √©checs
        else:
            self.check_cache_duration = 30   # 30s par d√©faut

# Instance globale
health_checker = GroqHealthChecker()

async def complete_with_health_check(prompt: str,
                                   model_name: Optional[str] = None,
                                   max_tokens: int = 600,
                                   temperature: float = 0.7) -> Tuple[str, Dict]:
    """
    Appel LLM avec health check pr√©alable
    Groq si healthy, sinon DeepSeek directement
    """
    
    # 1. HEALTH CHECK GROQ
    groq_healthy = await health_checker.is_groq_healthy()
    
    if groq_healthy:
        # 2. ESSAYER GROQ (apr√®s validation health check)
        try:
            print(f"üöÄ [SMART] Groq valid√© - requ√™te r√©elle...")
            from core.llm_client_groq import complete as groq_complete
            
            response, token_info = await groq_complete(
                prompt, model_name, max_tokens, temperature
            )
            
            # Succ√®s Groq
            token_info["provider"] = "groq"
            token_info["health_check"] = True
            token_info["fallback_used"] = False
            
            print(f"‚úÖ [SMART] Groq r√©ussi - {token_info.get('total_tokens', 0)} tokens")
            return response, token_info
            
        except Exception as e:
            print(f"üö´ [SMART] Groq √©chec malgr√© health check: {e}")
            # Marquer comme unhealthy pour les prochaines fois
            health_checker._mark_failure()
            # Continuer vers DeepSeek
    else:
        print(f"üîÑ [SMART] Groq unhealthy - DeepSeek direct")
    
    # 3. FALLBACK DEEPSEEK
    try:
        print(f"üü¢ [SMART] Utilisation DeepSeek...")
        from core.llm_client_deepseek import complete as deepseek_complete
        
        response = await deepseek_complete(
            prompt, 
            model_name="deepseek-chat", 
            max_tokens=max_tokens, 
            temperature=temperature
        )
        
        # Estimation tokens pour compatibilit√©
        estimated_input = len(prompt) // 4
        estimated_output = len(response) // 4
        
        token_info = {
            "prompt_tokens": estimated_input,
            "completion_tokens": estimated_output,
            "total_tokens": estimated_input + estimated_output,
            "model": "deepseek-chat",
            "provider": "deepseek",
            "health_check": not groq_healthy,
            "fallback_used": True,
            "estimated": True
        }
        
        print(f"‚úÖ [SMART] DeepSeek r√©ussi - ~{token_info['total_tokens']} tokens")
        return response, token_info
        
    except Exception as e:
        print(f"‚ùå [SMART] DeepSeek √âCHEC: {e}")
        
        # R√©ponse d'urgence
        emergency_response = "Bonjour ! üëã Envoyez-moi la photo du produit que vous voulez commander."
        token_info = {
            "prompt_tokens": 0,
            "completion_tokens": 0,
            "total_tokens": 0,
            "model": "emergency",
            "provider": "emergency",
            "health_check": False,
            "fallback_used": True,
            "error": str(e)
        }
        
        print(f"üÜò [SMART] R√©ponse d'urgence")
        return emergency_response, token_info

# Alias pour compatibilit√©
complete = complete_with_health_check
