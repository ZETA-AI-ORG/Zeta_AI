#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîó BOTLIVE INTEGRATION - Interface pour analyse images
Connecte le syst√®me Botlive existant au nouveau syst√®me d'analyse
"""

import base64
import tempfile
import os
from typing import Dict, Any
from pathlib import Path


async def analyze_image_with_botlive(
    image_data: str,
    user_id: str,
    context: str = ""
) -> Dict[str, Any]:
    """
    Appelle le syst√®me Botlive existant pour analyser une image
    
    Args:
        image_data: Image en base64
        user_id: ID utilisateur
        context: Contexte conversation
    
    Returns:
        {
            "analysis": "Texte brut de l'analyse Botlive",
            "confidence": 0.95,
            "raw_data": {...}
        }
    """
    
    print(f"üîó [BOTLIVE_INTEGRATION] Appel Botlive pour user {user_id}")
    
    try:
        # Importer BotliveEngine
        from core.botlive_engine import BotliveEngine
        
        # Initialiser engine (singleton recommand√© mais pour l'instant on instancie)
        engine = BotliveEngine()
        
        # Sauvegarder image temporairement (Botlive attend un chemin fichier)
        temp_image_path = _save_base64_to_temp(image_data)
        
        if not temp_image_path:
            raise Exception("Impossible de sauvegarder l'image temporaire")
        
        print(f"üìÅ [BOTLIVE_INTEGRATION] Image sauvegard√©e: {temp_image_path}")
        
        # D√©tecter type d'image (paiement vs produit)
        # On essaie d'abord OCR paiement, si √ßa √©choue on fait produit
        
        # 1. Essayer OCR paiement
        payment_result = engine.detect_payment(temp_image_path)
        
        if payment_result and payment_result.get("amount", 0) > 0:
            # C'est un paiement!
            print(f"üí∞ [BOTLIVE_INTEGRATION] Paiement d√©tect√©: {payment_result['amount']} FCFA")
            
            analysis_text = f"Paiement Wave d√©tect√©. Montant: {payment_result['amount']} FCFA. "
            if payment_result.get("phone"):
                analysis_text += f"Num√©ro: {payment_result['phone']}. "
            if payment_result.get("transaction_id"):
                analysis_text += f"Transaction: {payment_result['transaction_id']}."
            
            result = {
                "analysis": analysis_text,
                "confidence": payment_result.get("confidence", 0.85),
                "raw_data": payment_result
            }
        
        else:
            # Pas de paiement d√©tect√© ‚Üí Essayer produit
            print(f"üì¶ [BOTLIVE_INTEGRATION] Tentative d√©tection produit...")
            
            product_result = engine.detect_product(temp_image_path)
            
            analysis_text = f"Produit d√©tect√©: {product_result.get('name', 'Non identifi√©')}."
            
            result = {
                "analysis": analysis_text,
                "confidence": product_result.get("confidence", 0.75),
                "raw_data": product_result
            }
        
        # Nettoyer fichier temporaire
        try:
            os.remove(temp_image_path)
            print(f"üóëÔ∏è  [BOTLIVE_INTEGRATION] Fichier temporaire supprim√©")
        except:
            pass
        
        print(f"‚úÖ [BOTLIVE_INTEGRATION] Analyse r√©ussie (confiance: {result['confidence']:.2f})")
        return result
        
    except Exception as e:
        print(f"‚ùå [BOTLIVE_INTEGRATION] Erreur: {e}")
        import traceback
        traceback.print_exc()
        
        return {
            "analysis": "",
            "confidence": 0.0,
            "error": str(e)
        }


def _save_base64_to_temp(image_data: str) -> str:
    """
    Sauvegarde image base64 dans un fichier temporaire
    
    Args:
        image_data: Image en base64 (avec ou sans pr√©fixe data:image/...)
    
    Returns:
        Chemin du fichier temporaire
    """
    try:
        # Nettoyer le pr√©fixe data:image si pr√©sent
        if "," in image_data:
            image_data = image_data.split(",")[1]
        
        # D√©coder base64
        image_bytes = base64.b64decode(image_data)
        
        # Cr√©er fichier temporaire
        temp_dir = tempfile.gettempdir()
        temp_path = os.path.join(temp_dir, f"botlive_image_{os.getpid()}.jpg")
        
        with open(temp_path, "wb") as f:
            f.write(image_bytes)
        
        return temp_path
        
    except Exception as e:
        print(f"‚ùå [SAVE_TEMP] Erreur: {e}")
        return None
