# ========================================
# ‚ôªÔ∏è RESTORE STABLE VERSION - RESTAURATION
# ========================================
# Restaure une version stable verrouill√©e
# Usage: powershell ./scripts/restore_stable_version.ps1 20250118_143000

param(
    [Parameter(Mandatory=$true)]
    [string]$Timestamp
)

$ErrorActionPreference = "Stop"

$projectRoot = Split-Path -Parent $PSScriptRoot
$stableDir = Join-Path $projectRoot "stable\$Timestamp"

Write-Host ""
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "‚ôªÔ∏è RESTAURATION VERSION STABLE" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

# V√©rifier que la version existe
if (-not (Test-Path $stableDir)) {
    Write-Host "‚ùå ERREUR: Version stable '$Timestamp' introuvable!" -ForegroundColor Red
    Write-Host ""
    Write-Host "üìÇ Versions disponibles:" -ForegroundColor Yellow
    $stableRoot = Join-Path $projectRoot "stable"
    Get-ChildItem -Path $stableRoot -Directory | ForEach-Object {
        Write-Host "  ‚Üí $($_.Name)" -ForegroundColor Gray
    }
    exit 1
}

# Lire les m√©tadonn√©es
$metadataPath = Join-Path $stableDir "VERSION_INFO.json"
if (Test-Path $metadataPath) {
    $metadata = Get-Content $metadataPath | ConvertFrom-Json
    Write-Host "üìã VERSION √Ä RESTAURER:" -ForegroundColor Yellow
    Write-Host "  Description: $($metadata.description)" -ForegroundColor Gray
    Write-Host "  Branche: $($metadata.git_branch)" -ForegroundColor Gray
    Write-Host "  Commit: $($metadata.git_commit_short)" -ForegroundColor Gray
    Write-Host "  Taille: $($metadata.stable_size_mb) MB" -ForegroundColor Gray
    Write-Host ""
}

# Confirmation
Write-Host "‚ö†Ô∏è ATTENTION: Cette op√©ration va √©craser le code actuel!" -ForegroundColor Red
Write-Host "   Voulez-vous cr√©er une sauvegarde avant? (o/n)" -ForegroundColor Yellow
$response = Read-Host

if ($response -eq "o" -or $response -eq "O") {
    Write-Host "üíæ Cr√©ation d'une sauvegarde..." -ForegroundColor Yellow
    & "$PSScriptRoot\auto_backup.ps1" -Description "Avant restauration $Timestamp"
    Write-Host ""
}

Write-Host "Confirmer la restauration? (o/n)" -ForegroundColor Yellow
$confirm = Read-Host

if ($confirm -ne "o" -and $confirm -ne "O") {
    Write-Host "‚ùå Restauration annul√©e" -ForegroundColor Red
    exit 1
}

# Restaurer les dossiers
Write-Host ""
Write-Host "üì¶ Restauration des dossiers..." -ForegroundColor Yellow
$folders = Get-ChildItem -Path $stableDir -Directory
foreach ($folder in $folders) {
    $destPath = Join-Path $projectRoot $folder.Name
    Write-Host "  ‚Üí $($folder.Name)" -ForegroundColor Gray
    
    # Supprimer l'ancien dossier si existe
    if (Test-Path $destPath) {
        Remove-Item -Path $destPath -Recurse -Force
    }
    
    # Copier le nouveau
    Copy-Item -Path $folder.FullName -Destination $destPath -Recurse -Force
}

# Restaurer les fichiers racine
Write-Host "üìÑ Restauration des fichiers racine..." -ForegroundColor Yellow
$files = Get-ChildItem -Path $stableDir -File | Where-Object { $_.Name -ne "VERSION_INFO.json" -and $_.Name -ne "README.md" }
foreach ($file in $files) {
    $destPath = Join-Path $projectRoot $file.Name
    Write-Host "  ‚Üí $($file.Name)" -ForegroundColor Gray
    Copy-Item -Path $file.FullName -Destination $destPath -Force
}

Write-Host ""
Write-Host "‚úÖ RESTAURATION TERMIN√âE!" -ForegroundColor Green
Write-Host "üìÇ Version restaur√©e: $Timestamp" -ForegroundColor Green
Write-Host ""
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "üí° PROCHAINES √âTAPES:" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "1Ô∏è‚É£  V√©rifier que tout fonctionne" -ForegroundColor Gray
Write-Host "2Ô∏è‚É£  Red√©marrer le serveur si n√©cessaire" -ForegroundColor Gray
Write-Host "3Ô∏è‚É£  Commit Git: git add . && git commit -m 'Restauration version $Timestamp'" -ForegroundColor Gray
Write-Host ""
