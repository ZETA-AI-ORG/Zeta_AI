#!/usr/bin/env python3
"""
üóÑÔ∏è SCRIPT DE CONFIGURATION BASE DE DONN√âES
Configuration automatique des tables et donn√©es initiales
"""

import asyncio
import os
import sys
from pathlib import Path

# Ajouter le r√©pertoire parent au path
sys.path.append(str(Path(__file__).parent.parent))

from database.supabase_client import get_supabase_client
from core.company_config_manager import CompanyConfigManager
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def create_company_config_table():
    """Cr√©e la table company_configurations si elle n'existe pas"""
    
    # Lire le script SQL
    sql_file = Path(__file__).parent.parent / "database" / "create_company_config_table.sql"
    
    if not sql_file.exists():
        logger.error(f"Fichier SQL non trouv√©: {sql_file}")
        return False
    
    with open(sql_file, 'r', encoding='utf-8') as f:
        sql_content = f.read()
    
    try:
        supabase = get_supabase_client()
        
        # Diviser le script en commandes individuelles
        commands = [cmd.strip() for cmd in sql_content.split(';') if cmd.strip()]
        
        for i, command in enumerate(commands):
            if command:
                logger.info(f"Ex√©cution commande {i+1}/{len(commands)}")
                try:
                    result = supabase.rpc('execute_sql', {'sql_query': command}).execute()
                    logger.info(f"‚úÖ Commande {i+1} ex√©cut√©e avec succ√®s")
                except Exception as cmd_error:
                    logger.warning(f"‚ö†Ô∏è Commande {i+1} √©chou√©e (peut-√™tre d√©j√† existante): {str(cmd_error)}")
        
        logger.info("‚úÖ Configuration de la base de donn√©es termin√©e")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur configuration base de donn√©es: {str(e)}")
        return False

async def setup_default_company_configs():
    """Configure les configurations par d√©faut pour les entreprises de test"""
    
    config_manager = CompanyConfigManager()
    
    # Configuration pour Rue du Gros (exemple r√©el)
    rue_du_gros_config = {
        "business_rules": {
            "allow_pricing": False,
            "allow_promotions": False,
            "require_uncertainty": True,
            "max_product_claims": 5
        },
        "product_catalog": {
            "categories": ["couches", "lingettes", "soins b√©b√©", "pu√©riculture"],
            "sizes": ["1", "2", "3", "4", "5", "6"],
            "services": ["livraison", "conseil", "support", "retour"]
        },
        "validation_rules": {
            "dangerous_sizes": r"[789]\d*",
            "price_patterns": r"\d+[,.]?\d*\s*(?:‚Ç¨|FCFA|EUR)",
            "promo_patterns": r"\d+%"
        },
        "response_templates": {
            "unknown_product": "Je ne trouve pas ce produit dans notre catalogue de pu√©riculture. Puis-je vous aider avec autre chose ?",
            "no_pricing": "Je n'ai pas acc√®s aux prix en temps r√©el. Je vous recommande de consulter notre site web ou de contacter notre service client.",
            "no_promotion": "Je ne peux pas confirmer les promotions en cours. Pour conna√Ætre nos offres actuelles, consultez notre site web.",
            "uncertainty": "Je n'ai pas cette information pr√©cise dans ma base de connaissances. Puis-je vous orienter vers notre service client ?",
            "invalid_size": "Je ne trouve pas cette taille dans notre gamme. Nos couches sont disponibles en tailles 1 √† 6. Puis-je vous aider √† trouver la taille adapt√©e √† votre b√©b√© ?"
        }
    }
    
    # Configuration pour TechMega Store (exemple test)
    techmega_config = {
        "business_rules": {
            "allow_pricing": True,
            "allow_promotions": True,
            "require_uncertainty": False,
            "max_product_claims": 10
        },
        "product_catalog": {
            "categories": ["smartphones", "laptops", "consoles", "accessoires", "√©lectronique"],
            "sizes": ["S", "M", "L", "XL", "32GB", "64GB", "128GB", "256GB", "512GB"],
            "services": ["livraison", "installation", "garantie", "r√©paration"]
        },
        "validation_rules": {
            "dangerous_sizes": r"999\d*",
            "price_patterns": r"\d+[,.]?\d*\s*(?:‚Ç¨|EUR|\$|USD)",
            "promo_patterns": r"\d+%|\-\d+‚Ç¨"
        },
        "response_templates": {
            "unknown_product": "Ce produit n'est pas disponible dans notre catalogue √©lectronique. Puis-je vous proposer une alternative ?",
            "no_pricing": "Consultez notre site web pour les prix les plus r√©cents ou contactez notre service commercial.",
            "no_promotion": "V√©rifiez nos promotions actuelles sur notre site web ou inscrivez-vous √† notre newsletter.",
            "uncertainty": "Pour des informations techniques pr√©cises, je vous recommande de contacter notre support technique.",
            "invalid_size": "Cette configuration n'est pas disponible. Consultez les sp√©cifications disponibles sur notre site."
        }
    }
    
    # Sauvegarder les configurations
    companies = [
        ("MpfnlSbqwaZ6F4HvxQLRL9du0yG3", rue_du_gros_config),  # Rue du Gros
        ("XkCn8fjNWEWwqiiKMgJX7OcQrUJ4", techmega_config),     # TechMega Store
    ]
    
    for company_id, config in companies:
        try:
            success = await config_manager.update_company_config(company_id, config)
            if success:
                logger.info(f"‚úÖ Configuration sauvegard√©e pour {company_id}")
            else:
                logger.error(f"‚ùå √âchec sauvegarde pour {company_id}")
        except Exception as e:
            logger.error(f"‚ùå Erreur configuration {company_id}: {str(e)}")

async def test_database_connection():
    """Test la connexion √† la base de donn√©es"""
    try:
        supabase = get_supabase_client()
        
        # Test simple de connexion
        result = supabase.table('company_rag_configs').select('count', count='exact').execute()
        
        logger.info(f"‚úÖ Connexion base de donn√©es OK - {result.count} configurations trouv√©es")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur connexion base de donn√©es: {str(e)}")
        return False

async def main():
    """Script principal de configuration"""
    logger.info("üöÄ D√©marrage configuration base de donn√©es...")
    
    # 1. Test connexion
    logger.info("1Ô∏è‚É£ Test de connexion...")
    if not await test_database_connection():
        logger.error("‚ùå Impossible de se connecter √† la base de donn√©es")
        return
    
    # 2. Cr√©ation des tables
    logger.info("2Ô∏è‚É£ Cr√©ation des tables...")
    if not await create_company_config_table():
        logger.error("‚ùå √âchec cr√©ation des tables")
        return
    
    # 3. Configuration des entreprises par d√©faut
    logger.info("3Ô∏è‚É£ Configuration des entreprises par d√©faut...")
    await setup_default_company_configs()
    
    # 4. V√©rification finale
    logger.info("4Ô∏è‚É£ V√©rification finale...")
    config_manager = CompanyConfigManager()
    
    for company_id in ["MpfnlSbqwaZ6F4HvxQLRL9du0yG3", "XkCn8fjNWEWwqiiKMgJX7OcQrUJ4"]:
        config = await config_manager.get_company_config(company_id)
        if config:
            logger.info(f"‚úÖ Configuration {company_id}: {len(config.get('product_catalog', {}).get('categories', []))} cat√©gories")
        else:
            logger.warning(f"‚ö†Ô∏è Configuration {company_id} non trouv√©e")
    
    logger.info("üéâ Configuration base de donn√©es termin√©e avec succ√®s!")

if __name__ == "__main__":
    asyncio.run(main())
