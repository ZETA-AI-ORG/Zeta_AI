#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ TEST RAG COMPLET - RUE DU GROSSISTE
Company ID: 4OS4yFcf2LZwxhKojbAVbKuVuSdb

Objectifs:
1. Tester HYDE (nettoyage requ√™tes)
2. Tester MeiliSearch (recherche documents)
3. Tester extraction prix EXACTS
4. Tester utilisation outils (notepad, calculator)
5. Tester citations sources
6. Tester ordre chaotique des infos
"""

import requests
import json
import time
from datetime import datetime

# Configuration
BASE_URL = "http://127.0.0.1:8002"
COMPANY_ID = "4OS4yFcf2LZwxhKojbAVbKuVuSdb"

def print_section(title):
    """Affiche un titre de section"""
    print("\n" + "="*80)
    print(f"üß™ {title}")
    print("="*80)

def send_message(user_id, message):
    """Envoie un message au chatbot"""
    url = f"{BASE_URL}/chat"
    payload = {
        "message": message,
        "company_id": COMPANY_ID,
        "user_id": user_id
    }
    
    print(f"\nüì§ USER: {message}")
    start = time.time()
    
    try:
        response = requests.post(url, json=payload, timeout=30)
        elapsed = time.time() - start
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚è±Ô∏è  Temps: {elapsed:.2f}s")
            
            # Extraction robuste de la r√©ponse (g√®re dict ou string)
            response_data = data.get('response', {})
            if isinstance(response_data, dict):
                answer_text = response_data.get('response', 'Pas de r√©ponse')
            else:
                answer_text = str(response_data)
            
            print(f"ü§ñ ASSISTANT: {answer_text}")
            
            # Retourne un dict normalis√© avec la r√©ponse en string
            return {
                'response': answer_text,
                'raw_data': data,
                'success': True
            }
        else:
            print(f"‚ùå Erreur HTTP {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå Exception: {e}")
        return None

def test_1_prix_exacts():
    """
    TEST 1: V√©rifier que les prix EXACTS sont retourn√©s
    - Taille 4 = 24 000 FCFA (PAS 24 900)
    - Taille 5 = 24 900 FCFA
    """
    print_section("TEST 1: PRIX EXACTS (Taille 4 vs Taille 5)")
    
    user_id = f"test_prix_{datetime.now().strftime('%H%M%S')}"
    
    # Question pi√®ge: demander taille 4 ET 5
    response = send_message(user_id, 
        "Bonjour je veux le prix d'un lot de 300 couches √† pression taille 4 et taille 5")
    
    if response:
        answer = response.get('response', '').lower()
        
        # V√©rifications
        checks = {
            "Prix T4 = 24 000": "24 000" in answer or "24000" in answer,
            "Prix T5 = 24 900": "24 900" in answer or "24900" in answer,
            "Pas de confusion": not ("tous deux au prix de 24 900" in answer),
            "Taille 4 mentionn√©e": "taille 4" in answer,
            "Taille 5 mentionn√©e": "taille 5" in answer
        }
        
        print("\nüìä V√âRIFICATIONS:")
        for check, passed in checks.items():
            status = "‚úÖ" if passed else "‚ùå"
            print(f"{status} {check}")
        
        return all(checks.values())
    
    return False

def test_2_livraison_zones():
    """
    TEST 2: V√©rifier les frais de livraison par zone
    - Cocody = 1 500 FCFA (centre)
    - Yopougon = 1 500 FCFA (centre)
    - Port-Bou√´t = 2 000 FCFA (p√©riph√©rie)
    """
    print_section("TEST 2: FRAIS DE LIVRAISON PAR ZONE")
    
    user_id = f"test_livraison_{datetime.now().strftime('%H%M%S')}"
    
    zones_tests = [
        ("Cocody", "1 500", "1500"),
        ("Yopougon", "1 500", "1500"),
        ("Port-Bou√´t", "2 000", "2000")
    ]
    
    results = []
    for zone, prix_attendu1, prix_attendu2 in zones_tests:
        response = send_message(user_id, f"C'est combien la livraison √† {zone} ?")
        
        if response:
            answer = response.get('response', '')
            found = prix_attendu1 in answer or prix_attendu2 in answer
            results.append(found)
            print(f"{'‚úÖ' if found else '‚ùå'} {zone}: {prix_attendu1} FCFA trouv√©")
        else:
            results.append(False)
    
    return all(results)

def test_3_paiement_info():
    """
    TEST 3: V√©rifier les infos de paiement
    - M√©thode: Wave
    - Num√©ro: +225 0787360757
    - Acompte: 2 000 FCFA
    """
    print_section("TEST 3: INFORMATIONS PAIEMENT")
    
    user_id = f"test_paiement_{datetime.now().strftime('%H%M%S')}"
    
    response = send_message(user_id, "Comment je paye ?")
    
    if response:
        answer = response.get('response', '')
        
        checks = {
            "Wave mentionn√©": "wave" in answer.lower(),
            "Num√©ro correct": "0787360757" in answer or "+225 0787360757" in answer,
            "Acompte 2000": "2 000" in answer or "2000" in answer
        }
        
        print("\nüìä V√âRIFICATIONS:")
        for check, passed in checks.items():
            status = "‚úÖ" if passed else "‚ùå"
            print(f"{status} {check}")
        
        return all(checks.values())
    
    return False

def test_4_contact_support():
    """
    TEST 4: V√©rifier les infos de contact
    - WhatsApp: +225 0160924560
    """
    print_section("TEST 4: CONTACT SUPPORT")
    
    user_id = f"test_contact_{datetime.now().strftime('%H%M%S')}"
    
    response = send_message(user_id, "Comment je vous contacte ?")
    
    if response:
        answer = response.get('response', '')
        
        checks = {
            "WhatsApp mentionn√©": "whatsapp" in answer.lower(),
            "Num√©ro correct": "0160924560" in answer or "+225 0160924560" in answer
        }
        
        print("\nüìä V√âRIFICATIONS:")
        for check, passed in checks.items():
            status = "‚úÖ" if passed else "‚ùå"
            print(f"{status} {check}")
        
        return all(checks.values())
    
    return False

def test_5_calcul_total():
    """
    TEST 5: V√©rifier l'utilisation de calculator()
    - 2 lots taille 4 (24 000 x 2) + livraison Cocody (1 500) = 49 500 FCFA
    """
    print_section("TEST 5: CALCUL TOTAL AVEC CALCULATOR")
    
    user_id = f"test_calcul_{datetime.now().strftime('%H%M%S')}"
    
    # √âtape 1: Commander 2 lots taille 4
    send_message(user_id, "Je veux 2 lots de 300 couches taille 4")
    
    # √âtape 2: Demander le total avec livraison
    response = send_message(user_id, "Quel est le total avec livraison √† Cocody ?")
    
    if response:
        answer = response.get('response', '')
        
        # Chercher 49 500 ou 49500
        checks = {
            "Total correct": "49 500" in answer or "49500" in answer,
            "Calculator utilis√©": response.get('tools_executed', False)
        }
        
        print("\nüìä V√âRIFICATIONS:")
        for check, passed in checks.items():
            status = "‚úÖ" if passed else "‚ùå"
            print(f"{status} {check}")
        
        return all(checks.values())
    
    return False

def test_6_ordre_chaotique():
    """
    TEST 6: Tester ordre chaotique des infos (comme test Botlive)
    - Envoyer zone AVANT produit
    - V√©rifier que tout est bien collect√©
    """
    print_section("TEST 6: ORDRE CHAOTIQUE (Zone ‚Üí Produit ‚Üí Paiement)")
    
    user_id = f"test_chaos_{datetime.now().strftime('%H%M%S')}"
    
    # √âtape 1: Zone EN PREMIER (invers√©)
    send_message(user_id, "Yopougon")
    
    # √âtape 2: Produit
    send_message(user_id, "Je veux un lot de 300 couches taille 3")
    
    # √âtape 3: Demander r√©capitulatif
    response = send_message(user_id, "R√©capitulez ma commande")
    
    if response:
        answer = response.get('response', '').lower()
        
        checks = {
            "Zone collect√©e": "yopougon" in answer,
            "Produit collect√©": "taille 3" in answer or "22 900" in answer or "22900" in answer,
            "Livraison collect√©e": "1 500" in answer or "1500" in answer
        }
        
        print("\nüìä V√âRIFICATIONS:")
        for check, passed in checks.items():
            status = "‚úÖ" if passed else "‚ùå"
            print(f"{status} {check}")
        
        return all(checks.values())
    
    return False

def test_7_sources_citees():
    """
    TEST 7: V√©rifier que les sources sont cit√©es dans le thinking
    - Demander prix taille 6
    - V√©rifier que le LLM cite "DOCUMENT #X" dans son raisonnement
    """
    print_section("TEST 7: CITATION DES SOURCES")
    
    user_id = f"test_sources_{datetime.now().strftime('%H%M%S')}"
    
    response = send_message(user_id, "Prix lot 300 couches taille 6 ?")
    
    if response:
        # Chercher dans les logs (si disponibles) ou dans la r√©ponse
        answer = response.get('response', '')
        
        checks = {
            "Prix correct (24 900)": "24 900" in answer or "24900" in answer,
            "Taille 6 mentionn√©e": "taille 6" in answer.lower()
        }
        
        print("\nüìä V√âRIFICATIONS:")
        for check, passed in checks.items():
            status = "‚úÖ" if passed else "‚ùå"
            print(f"{status} {check}")
        
        return all(checks.values())
    
    return False

def test_8_couches_culottes():
    """
    TEST 8: Tester les couches culottes (produit diff√©rent)
    - Lot 150 = 13 500 FCFA
    - Lot 300 = 24 000 FCFA
    """
    print_section("TEST 8: COUCHES CULOTTES (Produit diff√©rent)")
    
    user_id = f"test_culottes_{datetime.now().strftime('%H%M%S')}"
    
    response = send_message(user_id, "Prix des couches culottes ?")
    
    if response:
        answer = response.get('response', '')
        
        checks = {
            "Lot 150 mentionn√©": "150" in answer,
            "Prix 13 500": "13 500" in answer or "13500" in answer,
            "Lot 300 mentionn√©": "300" in answer,
            "Prix 24 000": "24 000" in answer or "24000" in answer
        }
        
        print("\nüìä V√âRIFICATIONS:")
        for check, passed in checks.items():
            status = "‚úÖ" if passed else "‚ùå"
            print(f"{status} {check}")
        
        return all(checks.values())
    
    return False

def main():
    """Ex√©cute tous les tests"""
    print("\n" + "‚ïî" + "="*78 + "‚ïó")
    print("‚ïë" + " "*20 + "üß™ TEST RAG COMPLET - RUE DU GROSSISTE" + " "*20 + "‚ïë")
    print("‚ïë" + " "*25 + f"Company: {COMPANY_ID[:20]}..." + " "*10 + "‚ïë")
    print("‚ïö" + "="*78 + "‚ïù")
    
    tests = [
        ("Prix exacts (T4 vs T5)", test_1_prix_exacts),
        ("Frais livraison par zone", test_2_livraison_zones),
        ("Informations paiement", test_3_paiement_info),
        ("Contact support", test_4_contact_support),
        ("Calcul total (calculator)", test_5_calcul_total),
        ("Ordre chaotique", test_6_ordre_chaotique),
        ("Citation sources", test_7_sources_citees),
        ("Couches culottes", test_8_couches_culottes)
    ]
    
    results = []
    
    for i, (name, test_func) in enumerate(tests, 1):
        try:
            result = test_func()
            results.append((name, result))
            time.sleep(2)  # Pause entre tests
        except Exception as e:
            print(f"\n‚ùå Erreur test {i}: {e}")
            results.append((name, False))
    
    # R√©sum√© final
    print("\n" + "="*80)
    print("üìä R√âSUM√â DES TESTS")
    print("="*80)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} - {name}")
    
    print("\n" + "="*80)
    print(f"üéØ SCORE FINAL: {passed}/{total} ({passed*100//total}%)")
    print("="*80)
    
    if passed == total:
        print("\nüéâ TOUS LES TESTS SONT PASS√âS ! LE RAG FONCTIONNE PARFAITEMENT ! üöÄ")
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} test(s) ont √©chou√©. V√©rifier les logs ci-dessus.")

if __name__ == "__main__":
    main()
