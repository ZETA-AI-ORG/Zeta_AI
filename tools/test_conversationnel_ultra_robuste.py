#!/usr/bin/env python3
"""
üî• TEST CONVERSATIONNEL ULTRA-ROBUSTE
Validation compl√®te du syst√®me RAG avec m√©moire optimis√©e

OBJECTIFS:
1. Tester la m√©moire conversationnelle optimis√©e (sliding window + synthesis)
2. Valider la coh√©rence sur 50+ √©changes
3. Tester les changements d'avis multiples
4. V√©rifier la robustesse face aux erreurs
5. Mesurer les performances en conditions r√©elles
"""

import asyncio
import sys
import time
import json
import os
from datetime import datetime
from typing import List, Dict, Any
import statistics

# Ajouter le r√©pertoire parent au PYTHONPATH
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)

# üéØ SC√âNARIO ULTRA-ROBUSTE : 50 √âCHANGES COMPLEXES
ULTRA_ROBUST_CONVERSATION = [
    # === PHASE 1: EXPLORATION INITIALE (5 √©changes) ===
    {
        "user_message": "Bonjour, je cherche des couches pour mon b√©b√© de 8 mois qui p√®se 9kg",
        "expected_memory": ["b√©b√©", "8 mois", "9kg", "couches"],
        "phase": "exploration_initiale",
        "importance": "high"
    },
    {
        "user_message": "Il bouge beaucoup la nuit, quelle taille me conseillez-vous ?",
        "expected_memory": ["bouge", "nuit", "conseil taille"],
        "phase": "exploration_initiale",
        "importance": "high"
    },
    {
        "user_message": "Vous avez des couches √† pression ou seulement des culottes ?",
        "expected_memory": ["couches pression", "culottes", "types"],
        "phase": "exploration_initiale",
        "importance": "medium"
    },
    {
        "user_message": "En fait, j'aimerais aussi des couches pour ma grand-m√®re de 75 ans",
        "expected_memory": ["grand-m√®re", "75 ans", "couches adultes"],
        "phase": "exploration_initiale",
        "importance": "high"
    },
    {
        "user_message": "Elle a des probl√®mes de mobilit√©, quelle taille XL vous avez ?",
        "expected_memory": ["mobilit√©", "taille XL", "probl√®mes"],
        "phase": "exploration_initiale",
        "importance": "medium"
    },

    # === PHASE 2: N√âGOCIATION PRIX (10 √©changes) ===
    {
        "user_message": "Combien co√ªte 1 paquet de couches taille 3 pour b√©b√© ?",
        "expected_memory": ["prix", "1 paquet", "taille 3", "b√©b√©"],
        "phase": "negociation_prix",
        "importance": "high"
    },
    {
        "user_message": "Et pour les couches adultes XL, le prix unitaire ?",
        "expected_memory": ["prix", "adultes XL", "unitaire"],
        "phase": "negociation_prix",
        "importance": "high"
    },
    {
        "user_message": "Si je prends 3 paquets b√©b√© + 2 paquets adultes, vous me faites une remise ?",
        "expected_memory": ["3 paquets b√©b√©", "2 paquets adultes", "remise"],
        "phase": "negociation_prix",
        "importance": "high"
    },
    {
        "user_message": "Mon budget est limit√© √† 25000 FCFA maximum",
        "expected_memory": ["budget", "25000 FCFA", "maximum"],
        "phase": "negociation_prix",
        "importance": "high"
    },
    {
        "user_message": "Vous avez des promotions en cours cette semaine ?",
        "expected_memory": ["promotions", "cette semaine"],
        "phase": "negociation_prix",
        "importance": "medium"
    },
    {
        "user_message": "En fait, je pr√©f√®re commencer par 2 paquets b√©b√© pour tester",
        "expected_memory": ["2 paquets b√©b√©", "tester", "changement"],
        "phase": "negociation_prix",
        "importance": "high"
    },
    {
        "user_message": "Et 1 seul paquet adulte pour ma grand-m√®re",
        "expected_memory": ["1 paquet adulte", "grand-m√®re"],
        "phase": "negociation_prix",
        "importance": "high"
    },
    {
        "user_message": "Quel est le total de cette nouvelle commande ?",
        "expected_memory": ["total", "nouvelle commande"],
        "phase": "negociation_prix",
        "importance": "high"
    },
    {
        "user_message": "C'est dans mon budget, parfait !",
        "expected_memory": ["dans budget", "parfait", "validation"],
        "phase": "negociation_prix",
        "importance": "medium"
    },
    {
        "user_message": "Attendez, finalement je veux 3 paquets b√©b√© au lieu de 2",
        "expected_memory": ["3 paquets b√©b√©", "au lieu de 2", "changement"],
        "phase": "negociation_prix",
        "importance": "high"
    },

    # === PHASE 3: LIVRAISON COMPLEXE (10 √©changes) ===
    {
        "user_message": "Pour la livraison, je suis √† Cocody pr√®s du CHU",
        "expected_memory": ["livraison", "Cocody", "pr√®s CHU"],
        "phase": "livraison_complexe",
        "importance": "high"
    },
    {
        "user_message": "Vous livrez dans ce quartier ? Combien √ßa co√ªte ?",
        "expected_memory": ["quartier", "co√ªt livraison"],
        "phase": "livraison_complexe",
        "importance": "high"
    },
    {
        "user_message": "En fait, je pr√©f√®re √™tre livr√© au bureau √† Plateau",
        "expected_memory": ["bureau", "Plateau", "changement adresse"],
        "phase": "livraison_complexe",
        "importance": "high"
    },
    {
        "user_message": "C'est plus pratique pour moi, je travaille l√†-bas",
        "expected_memory": ["pratique", "travaille", "justification"],
        "phase": "livraison_complexe",
        "importance": "medium"
    },
    {
        "user_message": "Quelle diff√©rence de prix entre Cocody et Plateau ?",
        "expected_memory": ["diff√©rence prix", "Cocody", "Plateau"],
        "phase": "livraison_complexe",
        "importance": "medium"
    },
    {
        "user_message": "Si je commande maintenant, livraison possible demain matin ?",
        "expected_memory": ["commande maintenant", "demain matin", "d√©lai"],
        "phase": "livraison_complexe",
        "importance": "high"
    },
    {
        "user_message": "J'ai une r√©union importante √† 10h, livraison avant 9h possible ?",
        "expected_memory": ["r√©union 10h", "avant 9h", "contrainte"],
        "phase": "livraison_complexe",
        "importance": "high"
    },
    {
        "user_message": "Sinon, livraison √† domicile √† Cocody dans l'apr√®s-midi",
        "expected_memory": ["domicile", "Cocody", "apr√®s-midi", "alternative"],
        "phase": "livraison_complexe",
        "importance": "high"
    },
    {
        "user_message": "Vous me confirmez l'adresse exacte n√©cessaire ?",
        "expected_memory": ["adresse exacte", "confirmation"],
        "phase": "livraison_complexe",
        "importance": "medium"
    },
    {
        "user_message": "Finalement, livraison au bureau √† Plateau c'est mieux",
        "expected_memory": ["bureau Plateau", "mieux", "d√©cision finale"],
        "phase": "livraison_complexe",
        "importance": "high"
    },

    # === PHASE 4: PAIEMENT & MODIFICATIONS (10 √©changes) ===
    {
        "user_message": "Pour le paiement, quelles sont vos options ?",
        "expected_memory": ["paiement", "options"],
        "phase": "paiement_modifications",
        "importance": "high"
    },
    {
        "user_message": "Je peux payer par Wave ? J'ai un compte",
        "expected_memory": ["Wave", "compte"],
        "phase": "paiement_modifications",
        "importance": "high"
    },
    {
        "user_message": "Il faut un acompte ou je paie tout √† la livraison ?",
        "expected_memory": ["acompte", "paie tout", "livraison"],
        "phase": "paiement_modifications",
        "importance": "high"
    },
    {
        "user_message": "Si acompte, quel montant et sur quel num√©ro Wave ?",
        "expected_memory": ["montant acompte", "num√©ro Wave"],
        "phase": "paiement_modifications",
        "importance": "high"
    },
    {
        "user_message": "En fait, je veux annuler les couches adultes, juste garder celles du b√©b√©",
        "expected_memory": ["annuler adultes", "garder b√©b√©", "modification"],
        "phase": "paiement_modifications",
        "importance": "high"
    },
    {
        "user_message": "Ma grand-m√®re pr√©f√®re acheter elle-m√™me en pharmacie",
        "expected_memory": ["grand-m√®re", "pharmacie", "justification"],
        "phase": "paiement_modifications",
        "importance": "medium"
    },
    {
        "user_message": "Donc seulement 3 paquets couches b√©b√© taille 3",
        "expected_memory": ["3 paquets", "b√©b√©", "taille 3", "seulement"],
        "phase": "paiement_modifications",
        "importance": "high"
    },
    {
        "user_message": "Quel est le nouveau total avec livraison Plateau ?",
        "expected_memory": ["nouveau total", "livraison Plateau"],
        "phase": "paiement_modifications",
        "importance": "high"
    },
    {
        "user_message": "Parfait, je confirme cette commande modifi√©e",
        "expected_memory": ["confirme", "commande modifi√©e"],
        "phase": "paiement_modifications",
        "importance": "high"
    },
    {
        "user_message": "Envoyez-moi le r√©capitulatif complet par WhatsApp",
        "expected_memory": ["r√©capitulatif", "WhatsApp"],
        "phase": "paiement_modifications",
        "importance": "medium"
    },

    # === PHASE 5: VALIDATION & QUESTIONS FINALES (10 √©changes) ===
    {
        "user_message": "Rappelez-moi, mon b√©b√© fait combien de kilos d√©j√† ?",
        "expected_memory": ["TEST_M√âMOIRE", "9kg"],
        "phase": "validation_finale",
        "importance": "critical"
    },
    {
        "user_message": "Et j'ai command√© combien de paquets au final ?",
        "expected_memory": ["TEST_M√âMOIRE", "3 paquets"],
        "phase": "validation_finale",
        "importance": "critical"
    },
    {
        "user_message": "L'adresse de livraison c'est o√π d√©j√† ?",
        "expected_memory": ["TEST_M√âMOIRE", "bureau Plateau"],
        "phase": "validation_finale",
        "importance": "critical"
    },
    {
        "user_message": "Le d√©lai de livraison c'est quand ?",
        "expected_memory": ["TEST_M√âMOIRE", "demain matin"],
        "phase": "validation_finale",
        "importance": "critical"
    },
    {
        "user_message": "L'acompte √† payer c'est combien sur quel num√©ro ?",
        "expected_memory": ["TEST_M√âMOIRE", "acompte", "num√©ro"],
        "phase": "validation_finale",
        "importance": "critical"
    },
    {
        "user_message": "Vous avez mon num√©ro de t√©l√©phone pour la livraison ?",
        "expected_memory": ["num√©ro t√©l√©phone", "livraison"],
        "phase": "validation_finale",
        "importance": "medium"
    },
    {
        "user_message": "Si j'ai un probl√®me avec les couches, je peux les √©changer ?",
        "expected_memory": ["probl√®me", "√©changer", "garantie"],
        "phase": "validation_finale",
        "importance": "medium"
    },
    {
        "user_message": "Vous avez une garantie satisfaction ?",
        "expected_memory": ["garantie satisfaction"],
        "phase": "validation_finale",
        "importance": "medium"
    },
    {
        "user_message": "Parfait, j'attends votre confirmation de commande",
        "expected_memory": ["attends", "confirmation commande"],
        "phase": "validation_finale",
        "importance": "medium"
    },
    {
        "user_message": "Merci pour votre professionnalisme, √† bient√¥t !",
        "expected_memory": ["merci", "professionnalisme", "√† bient√¥t"],
        "phase": "validation_finale",
        "importance": "low"
    },

    # === PHASE 6: TESTS DE ROBUSTESSE (5 √©changes) ===
    {
        "user_message": "Au fait, vous vendez aussi des biberons ?",
        "expected_memory": ["biberons", "hors sujet"],
        "phase": "tests_robustesse",
        "importance": "low"
    },
    {
        "user_message": "Et si je veux changer l'adresse pour Paris ?",
        "expected_memory": ["Paris", "impossible"],
        "phase": "tests_robustesse",
        "importance": "low"
    },
    {
        "user_message": "Je peux payer en euros ?",
        "expected_memory": ["euros", "devise"],
        "phase": "tests_robustesse",
        "importance": "low"
    },
    {
        "user_message": "Donnez-moi un r√©capitulatif COMPLET de toute notre conversation",
        "expected_memory": ["TEST_M√âMOIRE_GLOBALE", "r√©capitulatif complet"],
        "phase": "tests_robustesse",
        "importance": "critical"
    },
    {
        "user_message": "Merci, c'est parfait, je suis tr√®s satisfait du service !",
        "expected_memory": ["satisfait", "service", "parfait"],
        "phase": "tests_robustesse",
        "importance": "low"
    }
]

# üìä M√âTRIQUES ULTRA-ROBUSTES
class UltraRobustMetrics:
    def __init__(self):
        self.conversation_log = []
        self.memory_tests = []
        self.performance_metrics = []
        self.error_log = []
        self.coherence_scores = []
        self.response_times = []
        
    def add_exchange(self, exchange_data: Dict[str, Any]):
        """Enregistre un √©change complet"""
        self.conversation_log.append({
            **exchange_data,
            "timestamp": datetime.now().isoformat(),
            "exchange_number": len(self.conversation_log) + 1
        })
        
        if exchange_data.get("response_time"):
            self.response_times.append(exchange_data["response_time"])
    
    def test_memory_coherence(self, user_message: str, response: str, 
                            expected_memory: List[str], phase: str, importance: str):
        """Teste la coh√©rence de la m√©moire"""
        found_elements = []
        missing_elements = []
        
        response_lower = response.lower()
        
        for expected in expected_memory:
            if expected.lower() in response_lower:
                found_elements.append(expected)
            else:
                missing_elements.append(expected)
        
        coherence_score = len(found_elements) / len(expected_memory) * 100 if expected_memory else 100
        
        memory_test = {
            "phase": phase,
            "importance": importance,
            "user_message": user_message[:100],
            "expected_memory": expected_memory,
            "found_elements": found_elements,
            "missing_elements": missing_elements,
            "coherence_score": coherence_score,
            "is_critical_test": "TEST_M√âMOIRE" in str(expected_memory)
        }
        
        self.memory_tests.append(memory_test)
        self.coherence_scores.append(coherence_score)
        
        return memory_test
    
    def add_error(self, error_type: str, error_message: str, exchange_number: int):
        """Enregistre une erreur"""
        self.error_log.append({
            "error_type": error_type,
            "error_message": error_message,
            "exchange_number": exchange_number,
            "timestamp": datetime.now().isoformat()
        })
    
    def calculate_performance_metrics(self):
        """Calcule les m√©triques de performance"""
        if not self.response_times:
            return {}
        
        return {
            "avg_response_time": statistics.mean(self.response_times),
            "median_response_time": statistics.median(self.response_times),
            "max_response_time": max(self.response_times),
            "min_response_time": min(self.response_times),
            "total_conversation_time": sum(self.response_times)
        }
    
    def generate_ultra_detailed_report(self):
        """G√©n√®re un rapport ultra-d√©taill√©"""
        print(f"\n{'='*100}")
        print(f"üî• RAPPORT TEST CONVERSATIONNEL ULTRA-ROBUSTE")
        print(f"{'='*100}")
        
        # Statistiques g√©n√©rales
        total_exchanges = len(self.conversation_log)
        total_errors = len(self.error_log)
        
        print(f"\nüìä STATISTIQUES G√âN√âRALES:")
        print(f"   ‚Ä¢ Total √©changes: {total_exchanges}")
        print(f"   ‚Ä¢ Erreurs d√©tect√©es: {total_errors}")
        print(f"   ‚Ä¢ Taux d'erreur: {(total_errors/total_exchanges*100):.1f}%")
        
        # M√©triques de performance
        perf_metrics = self.calculate_performance_metrics()
        if perf_metrics:
            print(f"\n‚ö° PERFORMANCES:")
            print(f"   ‚Ä¢ Temps moyen: {perf_metrics['avg_response_time']:.2f}s")
            print(f"   ‚Ä¢ Temps m√©dian: {perf_metrics['median_response_time']:.2f}s")
            print(f"   ‚Ä¢ Temps max: {perf_metrics['max_response_time']:.2f}s")
            print(f"   ‚Ä¢ Dur√©e totale: {perf_metrics['total_conversation_time']:.1f}s")
        
        # Tests de m√©moire
        if self.memory_tests:
            avg_coherence = statistics.mean(self.coherence_scores)
            critical_tests = [t for t in self.memory_tests if t["is_critical_test"]]
            critical_avg = statistics.mean([t["coherence_score"] for t in critical_tests]) if critical_tests else 0
            
            print(f"\nüß† TESTS DE M√âMOIRE:")
            print(f"   ‚Ä¢ Tests effectu√©s: {len(self.memory_tests)}")
            print(f"   ‚Ä¢ Coh√©rence moyenne: {avg_coherence:.1f}%")
            print(f"   ‚Ä¢ Tests critiques: {len(critical_tests)}")
            print(f"   ‚Ä¢ Coh√©rence critique: {critical_avg:.1f}%")
        
        # Analyse par phase
        phases = {}
        for test in self.memory_tests:
            phase = test["phase"]
            if phase not in phases:
                phases[phase] = []
            phases[phase].append(test["coherence_score"])
        
        print(f"\nüìã ANALYSE PAR PHASE:")
        for phase, scores in phases.items():
            avg_score = statistics.mean(scores)
            print(f"   ‚Ä¢ {phase}: {avg_score:.1f}% ({len(scores)} tests)")
        
        # Tests critiques √©chou√©s
        failed_critical = [t for t in critical_tests if t["coherence_score"] < 80]
        if failed_critical:
            print(f"\nüö® √âCHECS CRITIQUES ({len(failed_critical)}):")
            for test in failed_critical:
                print(f"   ‚Ä¢ {test['phase']}: {test['coherence_score']:.1f}%")
                print(f"     Manquant: {test['missing_elements']}")
        
        # Score global
        memory_score = avg_coherence
        critical_score = critical_avg
        performance_penalty = min(perf_metrics.get('avg_response_time', 0) * 2, 20) if perf_metrics else 0
        error_penalty = total_errors * 5
        
        final_score = max(0, memory_score * 0.6 + critical_score * 0.3 - performance_penalty - error_penalty)
        
        print(f"\nüéØ SCORE GLOBAL:")
        print(f"   ‚Ä¢ M√©moire g√©n√©rale: {memory_score:.1f}%")
        print(f"   ‚Ä¢ M√©moire critique: {critical_score:.1f}%")
        print(f"   ‚Ä¢ P√©nalit√© performance: -{performance_penalty:.1f}%")
        print(f"   ‚Ä¢ P√©nalit√© erreurs: -{error_penalty}%")
        print(f"   ‚Ä¢ SCORE FINAL: {final_score:.1f}%")
        
        # √âvaluation finale
        if final_score >= 90:
            print("   üü¢ EXCELLENT - Syst√®me ultra-robuste")
        elif final_score >= 80:
            print("   üü° BON - Quelques am√©liorations possibles")
        elif final_score >= 70:
            print("   üü† MOYEN - Am√©liorations n√©cessaires")
        elif final_score >= 60:
            print("   üî¥ FAIBLE - Probl√®mes importants")
        else:
            print("   ‚ö´ CRITIQUE - Refonte n√©cessaire")
        
        return final_score

async def run_ultra_robust_test():
    """Lance le test conversationnel ultra-robuste"""
    print(f"üî• D√âMARRAGE TEST CONVERSATIONNEL ULTRA-ROBUSTE")
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üéØ {len(ULTRA_ROBUST_CONVERSATION)} √©changes programm√©s")
    print(f"{'='*100}")
    
    from core.universal_rag_engine import UniversalRAGEngine
    rag = UniversalRAGEngine()
    metrics = UltraRobustMetrics()
    
    # Param√®tres de test
    COMPANY_ID = "MpfnlSbqwaZ6F4HvxQLRL9du0yG3"
    COMPANY_NAME = "Rue_du_gros"
    USER_ID = "ultra_robust_test_user"
    
    for i, exchange_data in enumerate(ULTRA_ROBUST_CONVERSATION, 1):
        user_message = exchange_data["user_message"]
        expected_memory = exchange_data["expected_memory"]
        phase = exchange_data["phase"]
        importance = exchange_data["importance"]
        
        print(f"\nüî• √âCHANGE {i}/{len(ULTRA_ROBUST_CONVERSATION)} - {phase.upper()}")
        print(f"üë§ USER: {user_message}")
        
        start_time = time.time()
        try:
            # Recherche et g√©n√©ration
            search_results = await rag.search_sequential_sources(user_message, COMPANY_ID)
            # Injection robuste de l'historique utilisateur dans search_results
            search_results['conversation_history'] = user_message if 'conversation_history' not in search_results else search_results['conversation_history']
            response = await rag.generate_response(
                user_message, search_results, COMPANY_ID, COMPANY_NAME, USER_ID
            )
            
            response_time = time.time() - start_time
            
            print(f"ü§ñ GAMMA: {response[:150]}{'...' if len(response) > 150 else ''}")
            print(f"‚è±Ô∏è  Temps: {response_time:.2f}s")
            
            # Test de coh√©rence m√©moire
            memory_test = metrics.test_memory_coherence(
                user_message, response, expected_memory, phase, importance
            )
            
            print(f"üß† Coh√©rence: {memory_test['coherence_score']:.1f}%", end="")
            if memory_test["is_critical_test"]:
                print(" [CRITIQUE]", end="")
            if memory_test["missing_elements"]:
                print(f" - Manque: {memory_test['missing_elements']}")
            else:
                print(" ‚úÖ")
            
            # Enregistrer l'√©change
            metrics.add_exchange({
                "user_message": user_message,
                "response": response,
                "response_time": response_time,
                "phase": phase,
                "importance": importance,
                "memory_test": memory_test
            })
            
        except Exception as e:
            response_time = time.time() - start_time
            error_msg = f"ERREUR: {str(e)[:100]}"
            print(f"‚ùå {error_msg}")
            
            metrics.add_error("generation_error", str(e), i)
            metrics.add_exchange({
                "user_message": user_message,
                "response": error_msg,
                "response_time": response_time,
                "phase": phase,
                "importance": importance,
                "error": True
            })
        
        # Pause courte entre √©changes
        await asyncio.sleep(0.3)
    
    # G√©n√©ration du rapport final
    final_score = metrics.generate_ultra_detailed_report()
    
    # Sauvegarde des r√©sultats
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"ultra_robust_test_results_{timestamp}.json"
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump({
            "final_score": final_score,
            "conversation_log": metrics.conversation_log,
            "memory_tests": metrics.memory_tests,
            "error_log": metrics.error_log,
            "performance_metrics": metrics.calculate_performance_metrics()
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ R√©sultats sauvegard√©s dans: {filename}")
    
    return final_score

if __name__ == "__main__":
    asyncio.run(run_ultra_robust_test())
