#!/usr/bin/env python3
"""
üî• TEST MARATHON CONVERSATIONNEL ULTRA-AGRESSIF
Objectif : Tester la capacit√© du RAG √† maintenir une conversation longue
sans perte d'informations sur un parcours client complet
"""
import asyncio
import sys
import time
import json
from datetime import datetime
from typing import List, Dict, Any

sys.path.append("..")

# üéØ SC√âNARIO MARATHON : INTERACTION CLIENT COMPL√àTE ULTRA-AGRESSIVE
# Simulation d'un client exigeant qui change d'avis, pose des questions complexes,
# revient sur ses d√©cisions, demande des clarifications, etc.

MARATHON_CONVERSATION = [
    # === PHASE 1: PREMIER CONTACT & H√âSITATIONS ===
    {
        "message": "Bonjour, je cherche des couches pour mon b√©b√©",
        "attentes": ["salutation", "produits", "questions_clarification"],
        "phase": "contact_initial"
    },
    {
        "message": "En fait, attendez, c'est pour ma grand-m√®re qui a des probl√®mes d'incontinence",
        "attentes": ["changement_contexte", "couches_adultes", "adaptation"],
        "phase": "changement_contexte_1"
    },
    {
        "message": "Non pardon, c'est bien pour mon b√©b√© de 8 mois qui p√®se 9kg",
        "attentes": ["retour_contexte_initial", "taille_recommandee", "coherence"],
        "phase": "retour_contexte"
    },
    {
        "message": "Mais j'aimerais aussi des couches pour ma grand-m√®re, vous en avez ?",
        "attentes": ["double_demande", "couches_adultes", "gestion_multiple"],
        "phase": "demande_multiple"
    },
    
    # === PHASE 2: EXPLORATION PRODUITS COMPLEXE ===
    {
        "message": "Quelles sont les diff√©rences entre vos couches √† pression et culottes pour b√©b√© ?",
        "attentes": ["comparaison_produits", "details_techniques", "conseil"],
        "phase": "exploration_produits"
    },
    {
        "message": "Mon b√©b√© bouge beaucoup la nuit, que me conseillez-vous ?",
        "attentes": ["conseil_personnalise", "usage_nocturne", "adaptation_besoin"],
        "phase": "conseil_specifique"
    },
    {
        "message": "Et pour ma grand-m√®re, elle a besoin de taille XL, vous avez quoi ?",
        "attentes": ["retour_adultes", "tailles_disponibles", "coherence_demande"],
        "phase": "retour_adultes"
    },
    {
        "message": "Attendez, revenons au b√©b√©. Il fait 9kg, quelle taille exactement ?",
        "attentes": ["retour_bebe", "taille_precise", "memoire_poids"],
        "phase": "precision_taille"
    },
    
    # === PHASE 3: N√âGOCIATION PRIX & QUANTIT√âS ===
    {
        "message": "Combien co√ªte 1 paquet de couches taille 3 pour b√©b√© ?",
        "attentes": ["prix_unitaire", "taille_3", "calcul_exact"],
        "phase": "demande_prix"
    },
    {
        "message": "Et si j'en prends 5 paquets, vous me faites une remise ?",
        "attentes": ["prix_degressif", "calcul_total", "promotion"],
        "phase": "negociation_quantite"
    },
    {
        "message": "En fait, je pr√©f√®re commencer par 2 paquets pour tester",
        "attentes": ["changement_quantite", "nouveau_calcul", "flexibilite"],
        "phase": "reduction_quantite"
    },
    {
        "message": "Plus 3 paquets de couches adultes pour ma grand-m√®re",
        "attentes": ["ajout_adultes", "calcul_mixte", "gestion_panier"],
        "phase": "commande_mixte"
    },
    {
        "message": "Quel est le total de ma commande actuelle ?",
        "attentes": ["recapitulatif_complet", "calcul_total", "memoire_panier"],
        "phase": "demande_total"
    },
    
    # === PHASE 4: LIVRAISON COMPLIQU√âE ===
    {
        "message": "Je suis √† Cocody, vous livrez l√†-bas ?",
        "attentes": ["zone_livraison", "cocody", "tarif_livraison"],
        "phase": "demande_livraison"
    },
    {
        "message": "Combien √ßa co√ªte la livraison √† Cocody ?",
        "attentes": ["prix_livraison", "cocody", "ajout_frais"],
        "phase": "cout_livraison"
    },
    {
        "message": "En fait, je pr√©f√®re √™tre livr√© √† Yopougon chez ma m√®re",
        "attentes": ["changement_adresse", "yopougon", "nouveau_tarif"],
        "phase": "changement_adresse"
    },
    {
        "message": "Non attendez, finalement Cocody c'est mieux. Quelle diff√©rence de prix ?",
        "attentes": ["retour_cocody", "comparaison_tarifs", "coherence"],
        "phase": "comparaison_zones"
    },
    {
        "message": "Si je commande maintenant, je peux √™tre livr√© quand ?",
        "attentes": ["delai_livraison", "heure_actuelle", "planning"],
        "phase": "delai_livraison"
    },
    
    # === PHASE 5: PAIEMENT & H√âSITATIONS ===
    {
        "message": "Quels sont vos modes de paiement ?",
        "attentes": ["modes_paiement", "options_disponibles", "securite"],
        "phase": "modes_paiement"
    },
    {
        "message": "Je peux payer √† la livraison ?",
        "attentes": ["paiement_livraison", "cod", "conditions"],
        "phase": "paiement_livraison"
    },
    {
        "message": "Il faut un acompte ? Combien ?",
        "attentes": ["acompte", "montant_acompte", "conditions"],
        "phase": "acompte"
    },
    {
        "message": "Je peux payer l'acompte par Wave ?",
        "attentes": ["wave", "acompte_wave", "numero_wave"],
        "phase": "acompte_wave"
    },
    
    # === PHASE 6: MODIFICATIONS DERNI√àRE MINUTE ===
    {
        "message": "En fait, je veux annuler les couches adultes, juste garder celles du b√©b√©",
        "attentes": ["annulation_partielle", "nouveau_calcul", "flexibilite"],
        "phase": "modification_commande"
    },
    {
        "message": "Attendez, je change d'avis, je garde tout mais j'ajoute 1 paquet de plus pour b√©b√©",
        "attentes": ["retour_commande_complete", "ajout_paquet", "nouveau_total"],
        "phase": "ajout_derniere_minute"
    },
    {
        "message": "R√©capitulez-moi toute ma commande avec les prix d√©taill√©s",
        "attentes": ["recapitulatif_final", "details_complets", "coherence_totale"],
        "phase": "recapitulatif_final"
    },
    
    # === PHASE 7: QUESTIONS TECHNIQUES POUSS√âES ===
    {
        "message": "Les couches sont-elles hypoallerg√©niques ?",
        "attentes": ["caracteristiques_techniques", "allergie", "composition"],
        "phase": "questions_techniques"
    },
    {
        "message": "Quelle est la capacit√© d'absorption des couches taille 3 ?",
        "attentes": ["specifications_techniques", "absorption", "performance"],
        "phase": "specifications"
    },
    {
        "message": "Vous avez une garantie si les couches ne conviennent pas ?",
        "attentes": ["politique_retour", "garantie", "satisfaction"],
        "phase": "garantie"
    },
    
    # === PHASE 8: VALIDATION & DERNI√àRES V√âRIFICATIONS ===
    {
        "message": "Confirmez-moi l'adresse de livraison : c'√©tait Cocody ou Yopougon ?",
        "attentes": ["verification_adresse", "memoire_changements", "cocody"],
        "phase": "verification_adresse"
    },
    {
        "message": "Et le d√©lai de livraison si je confirme maintenant ?",
        "attentes": ["delai_final", "heure_commande", "planning_livraison"],
        "phase": "delai_final"
    },
    {
        "message": "Le num√©ro Wave pour l'acompte, c'est lequel d√©j√† ?",
        "attentes": ["numero_wave", "memoire_paiement", "acompte"],
        "phase": "numero_wave"
    },
    {
        "message": "Parfait, je confirme ma commande. Donnez-moi le r√©capitulatif complet final",
        "attentes": ["confirmation_finale", "recapitulatif_complet", "coherence_totale"],
        "phase": "confirmation_finale"
    },
    
    # === PHASE 9: QUESTIONS POST-COMMANDE ===
    {
        "message": "J'aurai un num√©ro de suivi pour ma commande ?",
        "attentes": ["suivi_commande", "numero_suivi", "tracking"],
        "phase": "suivi_commande"
    },
    {
        "message": "Si j'ai un probl√®me avec la livraison, qui je contacte ?",
        "attentes": ["support_client", "contact_probleme", "service_apres_vente"],
        "phase": "support_probleme"
    },
    {
        "message": "Je peux modifier ma commande apr√®s confirmation ?",
        "attentes": ["modification_post_commande", "flexibilite", "conditions"],
        "phase": "modification_post"
    },
    
    # === PHASE 10: TESTS DE COH√âRENCE EXTR√äME ===
    {
        "message": "Rappelez-moi, mon b√©b√© fait combien de kilos d√©j√† ?",
        "attentes": ["memoire_poids", "9kg", "coherence_longue"],
        "phase": "test_memoire_poids"
    },
    {
        "message": "Et j'avais command√© combien de paquets au final ?",
        "attentes": ["memoire_quantite", "calcul_final", "coherence"],
        "phase": "test_memoire_quantite"
    },
    {
        "message": "Le prix total avec livraison, c'√©tait combien ?",
        "attentes": ["memoire_prix_total", "calcul_complet", "precision"],
        "phase": "test_memoire_prix"
    },
    {
        "message": "Et l'acompte √† payer, c'est quel montant sur quel num√©ro ?",
        "attentes": ["memoire_acompte", "numero_wave", "montant_exact"],
        "phase": "test_memoire_acompte"
    },
    
    # === PHASE 11: QUESTIONS PI√àGES FINALES ===
    {
        "message": "Au fait, vous livrez aussi des couches pour chiens ?",
        "attentes": ["question_hors_sujet", "recentrage_metier", "coherence"],
        "phase": "question_piege_1"
    },
    {
        "message": "Et si je veux changer l'adresse de livraison pour Paris ?",
        "attentes": ["zone_impossible", "limitation_geographique", "explication"],
        "phase": "question_piege_2"
    },
    {
        "message": "Je peux payer en bitcoins ?",
        "attentes": ["mode_paiement_impossible", "alternatives", "coherence"],
        "phase": "question_piege_3"
    },
    
    # === PHASE 12: VALIDATION FINALE ULTIME ===
    {
        "message": "Parfait, merci. Pouvez-vous me faire un r√©capitulatif COMPLET de toute notre conversation et de ma commande finale ?",
        "attentes": ["recapitulatif_conversation", "memoire_complete", "coherence_totale"],
        "phase": "recapitulatif_conversation"
    }
]

# üìä M√âTRIQUES DE COH√âRENCE CONVERSATIONNELLE
class ConversationCoherenceMetrics:
    def __init__(self):
        self.conversation_history = []
        self.memory_tests = []
        self.coherence_failures = []
        self.context_losses = []
        self.price_calculations = []
        self.address_changes = []
        self.product_changes = []
        self.response_times = []
        
    def add_exchange(self, question: str, response: str, response_time: float, phase: str):
        exchange = {
            "timestamp": datetime.now().isoformat(),
            "phase": phase,
            "question": question,
            "response": response,
            "response_time": response_time,
            "exchange_number": len(self.conversation_history) + 1
        }
        self.conversation_history.append(exchange)
        self.response_times.append(response_time)
        
    def test_memory_coherence(self, question: str, response: str, expected_info: List[str]):
        """Teste si le syst√®me se souvient des informations importantes"""
        memory_test = {
            "question": question,
            "response": response,
            "expected_info": expected_info,
            "found_info": [],
            "missing_info": [],
            "coherence_score": 0
        }
        
        for info in expected_info:
            if info.lower() in response.lower():
                memory_test["found_info"].append(info)
            else:
                memory_test["missing_info"].append(info)
        
        memory_test["coherence_score"] = len(memory_test["found_info"]) / len(expected_info) * 100
        self.memory_tests.append(memory_test)
        
        if memory_test["coherence_score"] < 50:
            self.coherence_failures.append(memory_test)
    
    def detect_context_loss(self, question: str, response: str, phase: str):
        """D√©tecte les pertes de contexte"""
        context_indicators = {
            "bebe_9kg": ["9kg", "9 kg", "neuf kilos"],
            "cocody_address": ["cocody", "Cocody"],
            "wave_payment": ["wave", "Wave", "+225"],
            "taille_3": ["taille 3", "taille3", "T3"],
            "acompte_2000": ["2000", "2 000", "deux mille"]
        }
        
        for context_key, indicators in context_indicators.items():
            if any(indicator in question.lower() for indicator in indicators):
                if not any(indicator in response.lower() for indicator in indicators):
                    self.context_losses.append({
                        "phase": phase,
                        "lost_context": context_key,
                        "question": question[:100],
                        "response": response[:100]
                    })
    
    def analyze_price_coherence(self, response: str):
        """Analyse la coh√©rence des calculs de prix"""
        import re
        prices = re.findall(r'(\d+(?:\.\d+)?)\s*(?:F\s*)?CFA', response)
        if prices:
            self.price_calculations.append({
                "response": response[:200],
                "prices_found": prices,
                "timestamp": datetime.now().isoformat()
            })
    
    def print_detailed_report(self):
        print(f"\n{'='*100}")
        print(f"üî• RAPPORT MARATHON CONVERSATIONNEL ULTRA-D√âTAILL√â")
        print(f"{'='*100}")
        
        # Statistiques g√©n√©rales
        total_exchanges = len(self.conversation_history)
        avg_response_time = sum(self.response_times) / len(self.response_times) if self.response_times else 0
        
        print(f"\nüìä STATISTIQUES G√âN√âRALES:")
        print(f"   ‚Ä¢ Total d'√©changes: {total_exchanges}")
        print(f"   ‚Ä¢ Temps de r√©ponse moyen: {avg_response_time:.2f}s")
        print(f"   ‚Ä¢ Dur√©e totale conversation: {sum(self.response_times):.2f}s")
        
        # Tests de m√©moire
        if self.memory_tests:
            avg_coherence = sum(test["coherence_score"] for test in self.memory_tests) / len(self.memory_tests)
            print(f"\nüß† TESTS DE M√âMOIRE:")
            print(f"   ‚Ä¢ Tests effectu√©s: {len(self.memory_tests)}")
            print(f"   ‚Ä¢ Score de coh√©rence moyen: {avg_coherence:.1f}%")
            print(f"   ‚Ä¢ √âchecs de coh√©rence: {len(self.coherence_failures)}")
        
        # Pertes de contexte
        if self.context_losses:
            print(f"\n‚ùå PERTES DE CONTEXTE D√âTECT√âES ({len(self.context_losses)}):")
            for loss in self.context_losses[:5]:  # Top 5
                print(f"   ‚Ä¢ Phase {loss['phase']}: Perte de '{loss['lost_context']}'")
        
        # Calculs de prix
        if self.price_calculations:
            print(f"\nüí∞ CALCULS DE PRIX ({len(self.price_calculations)} d√©tect√©s):")
            for calc in self.price_calculations[-3:]:  # 3 derniers
                print(f"   ‚Ä¢ Prix trouv√©s: {calc['prices_found']}")
        
        # Analyse par phase
        phases = {}
        for exchange in self.conversation_history:
            phase = exchange["phase"]
            if phase not in phases:
                phases[phase] = []
            phases[phase].append(exchange)
        
        print(f"\nüìã ANALYSE PAR PHASE:")
        for phase, exchanges in phases.items():
            avg_time = sum(e["response_time"] for e in exchanges) / len(exchanges)
            print(f"   ‚Ä¢ {phase}: {len(exchanges)} √©changes, {avg_time:.2f}s moyen")
        
        # Score global de performance
        coherence_score = avg_coherence if self.memory_tests else 100
        context_penalty = len(self.context_losses) * 10
        final_score = max(0, coherence_score - context_penalty)
        
        print(f"\nüéØ SCORE GLOBAL DE PERFORMANCE:")
        print(f"   ‚Ä¢ Score de coh√©rence: {coherence_score:.1f}%")
        print(f"   ‚Ä¢ P√©nalit√© contexte: -{context_penalty}%")
        print(f"   ‚Ä¢ SCORE FINAL: {final_score:.1f}%")
        
        if final_score >= 90:
            print("   üü¢ EXCELLENT - M√©moire conversationnelle exceptionnelle")
        elif final_score >= 75:
            print("   üü° BON - Quelques pertes mineures de contexte")
        elif final_score >= 50:
            print("   üü† MOYEN - Am√©liorations n√©cessaires")
        else:
            print("   üî¥ CRITIQUE - Pertes majeures de contexte")
        
        # D√©tail des √©checs critiques
        if self.coherence_failures:
            print(f"\nüö® √âCHECS CRITIQUES DE COH√âRENCE:")
            for failure in self.coherence_failures:
                print(f"   ‚Ä¢ Question: {failure['question'][:80]}...")
                print(f"     Informations manquantes: {failure['missing_info']}")
                print(f"     Score: {failure['coherence_score']:.1f}%")

async def run_conversation_marathon():
    """Lance le test marathon conversationnel"""
    print(f"üî• D√âMARRAGE DU MARATHON CONVERSATIONNEL")
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üéØ {len(MARATHON_CONVERSATION)} √©changes programm√©s")
    print(f"{'='*100}")
    
    from core.universal_rag_engine import UniversalRAGEngine
    rag = UniversalRAGEngine()
    metrics = ConversationCoherenceMetrics()
    
    # Variables de contexte pour tests de coh√©rence
    user_context = {
        "baby_weight": None,
        "baby_size": None,
        "delivery_address": None,
        "total_price": None,
        "payment_method": None,
        "order_items": []
    }
    
    for i, exchange in enumerate(MARATHON_CONVERSATION, 1):
        message = exchange["message"]
        phase = exchange["phase"]
        expected = exchange.get("attentes", [])
        
        print(f"\nüî• √âCHANGE {i}/{len(MARATHON_CONVERSATION)} - PHASE: {phase}")
        print(f"üë§ CLIENT: {message}")
        
        start_time = time.time()
        try:
            # Recherche et g√©n√©ration de r√©ponse
            search_results = await rag.search_sequential_sources(message, "MpfnlSbqwaZ6F4HvxQLRL9du0yG3")
            # Injection robuste de l'historique utilisateur dans search_results
            search_results['conversation_history'] = message if 'conversation_history' not in search_results else search_results['conversation_history']
            response = await rag.generate_response(
                message, 
                search_results, 
                "MpfnlSbqwaZ6F4HvxQLRL9du0yG3", 
                "Rue_du_gros", 
                "marathon_test_user"
            )
            
            response_time = time.time() - start_time
            
            print(f"ü§ñ GAMMA: {response[:200]}{'...' if len(response) > 200 else ''}")
            print(f"‚è±Ô∏è  Temps: {response_time:.2f}s")
            
            # Enregistrement de l'√©change
            metrics.add_exchange(message, response, response_time, phase)
            
            # Tests de coh√©rence sp√©cifiques
            metrics.test_memory_coherence(message, response, expected)
            metrics.detect_context_loss(message, response, phase)
            metrics.analyze_price_coherence(response)
            
            # Extraction d'informations contextuelles
            if "9kg" in message or "9 kg" in message:
                user_context["baby_weight"] = "9kg"
            if "cocody" in message.lower():
                user_context["delivery_address"] = "Cocody"
            if "yopougon" in message.lower():
                user_context["delivery_address"] = "Yopougon"
            
            # Pause courte entre √©changes
            await asyncio.sleep(0.5)
            
        except Exception as e:
            response_time = time.time() - start_time
            error_msg = f"ERREUR: {str(e)[:100]}"
            print(f"‚ùå {error_msg}")
            metrics.add_exchange(message, error_msg, response_time, phase)
    
    # Rapport final d√©taill√©
    metrics.print_detailed_report()
    
    # Sauvegarde des r√©sultats
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"marathon_results_{timestamp}.json"
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump({
            "conversation_history": metrics.conversation_history,
            "memory_tests": metrics.memory_tests,
            "coherence_failures": metrics.coherence_failures,
            "context_losses": metrics.context_losses,
            "user_context": user_context
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ R√©sultats sauvegard√©s dans: {filename}")

if __name__ == "__main__":
    asyncio.run(run_conversation_marathon())
