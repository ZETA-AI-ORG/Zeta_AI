# ========================================
# ü§ñ INSTRUCTIONS POUR WINDSURF/CURSOR
# ========================================
# Copie ces instructions dans Windsurf pour qu'il respecte le syst√®me de protection

R√àGLES STRICTES POUR L'IA:

1. BRANCHE DE TRAVAIL:
   - Tu dois TOUJOURS travailler sur la branche 'ia'
   - JAMAIS modifier directement la branche 'main'
   - V√©rifier la branche actuelle avant toute modification: git branch

2. FICHIERS INTERDITS:
   - NE JAMAIS toucher au dossier /stable
   - NE JAMAIS toucher au dossier /backup
   - NE JAMAIS modifier les scripts dans /scripts
   - NE JAMAIS modifier .gitignore
   - NE JAMAIS modifier les workflows GitHub

3. FICHIERS SENSIBLES:
   - .env ‚Üí Modifications avec confirmation utilisateur
   - app.py ‚Üí Modifications avec confirmation utilisateur
   - database/vector_store_clean_v2.py ‚Üí Modifications avec confirmation
   - core/rag_engine.py ‚Üí Modifications avec confirmation

4. AVANT TOUTE MODIFICATION MAJEURE:
   - Demander confirmation √† l'utilisateur
   - Expliquer clairement ce qui va √™tre modifi√©
   - Proposer une sauvegarde si n√©cessaire

5. APR√àS MODIFICATIONS:
   - Sugg√©rer de v√©rifier les changements: powershell ./scripts/check_ia_changes.ps1
   - Sugg√©rer de tester le code
   - Sugg√©rer de cr√©er une version stable si tout fonctionne

6. EN CAS D'ERREUR:
   - Proposer de restaurer une version stable
   - Proposer d'annuler les modifications: git reset --hard main
   - Ne JAMAIS forcer des modifications qui cassent le code

7. COMMITS:
   - Toujours faire des commits clairs et descriptifs
   - Format: "üîß [Composant] Description courte"
   - Exemples:
     * "üîß [MeiliSearch] Fix scoring case-insensitive"
     * "‚ú® [RAG] Ajout filtrage dynamique"
     * "üêõ [API] Correction endpoint /chat"

8. TESTS:
   - Toujours sugg√©rer de tester apr√®s modifications
   - Proposer des commandes de test appropri√©es
   - V√©rifier que le serveur d√©marre correctement

9. DOCUMENTATION:
   - Mettre √† jour la documentation si n√©cessaire
   - Expliquer les changements complexes
   - Ajouter des commentaires dans le code

10. S√âCURIT√â:
    - Ne JAMAIS commit de secrets (API keys, passwords)
    - V√©rifier que .env est dans .gitignore
    - Alerter si des secrets sont d√©tect√©s dans le code

========================================
WORKFLOW RECOMMAND√â:
========================================

1. D√âBUT DE SESSION:
   git checkout ia
   powershell ./scripts/auto_backup.ps1

2. D√âVELOPPEMENT:
   - Faire les modifications demand√©es
   - Tester r√©guli√®rement
   - Commits fr√©quents

3. FIN DE SESSION:
   powershell ./scripts/check_ia_changes.ps1
   # Si OK: git checkout main && git merge ia
   # Si KO: git reset --hard main

========================================
EXEMPLES DE BONNES PRATIQUES:
========================================

‚úÖ BON:
"Je vais modifier le fichier database/vector_store_clean_v2.py pour corriger le scoring.
Voulez-vous que je cr√©e une sauvegarde d'abord?"

‚úÖ BON:
"Modifications termin√©es. Je sugg√®re de:
1. Tester avec: python test_meili_lite.py
2. V√©rifier les changements: powershell ./scripts/check_ia_changes.ps1
3. Si OK, fusionner: git checkout main && git merge ia"

‚ùå MAUVAIS:
"Je vais modifier directement app.py sur main sans confirmation."

‚ùå MAUVAIS:
"Je supprime le dossier /stable car il prend de la place."

========================================
RAPPEL IMPORTANT:
========================================

Tu es un ASSISTANT, pas un dictateur.
- Toujours demander confirmation pour les modifications majeures
- Toujours expliquer ce que tu fais
- Toujours proposer des alternatives
- Toujours respecter les r√®gles de protection

L'utilisateur a le dernier mot sur TOUTES les d√©cisions.
